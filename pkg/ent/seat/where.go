// Code generated by ent, DO NOT EDIT.

package seat

import (
	"cinema/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldUpdatedAt, v))
}

// Row applies equality check predicate on the "row" field. It's identical to RowEQ.
func Row(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldRow, v))
}

// Column applies equality check predicate on the "column" field. It's identical to ColumnEQ.
func Column(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldColumn, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldUpdatedAt, v))
}

// RowEQ applies the EQ predicate on the "row" field.
func RowEQ(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldRow, v))
}

// RowNEQ applies the NEQ predicate on the "row" field.
func RowNEQ(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldRow, v))
}

// RowIn applies the In predicate on the "row" field.
func RowIn(vs ...int16) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldRow, vs...))
}

// RowNotIn applies the NotIn predicate on the "row" field.
func RowNotIn(vs ...int16) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldRow, vs...))
}

// RowGT applies the GT predicate on the "row" field.
func RowGT(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldRow, v))
}

// RowGTE applies the GTE predicate on the "row" field.
func RowGTE(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldRow, v))
}

// RowLT applies the LT predicate on the "row" field.
func RowLT(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldRow, v))
}

// RowLTE applies the LTE predicate on the "row" field.
func RowLTE(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldRow, v))
}

// ColumnEQ applies the EQ predicate on the "column" field.
func ColumnEQ(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldColumn, v))
}

// ColumnNEQ applies the NEQ predicate on the "column" field.
func ColumnNEQ(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldColumn, v))
}

// ColumnIn applies the In predicate on the "column" field.
func ColumnIn(vs ...int16) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldColumn, vs...))
}

// ColumnNotIn applies the NotIn predicate on the "column" field.
func ColumnNotIn(vs ...int16) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldColumn, vs...))
}

// ColumnGT applies the GT predicate on the "column" field.
func ColumnGT(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldColumn, v))
}

// ColumnGTE applies the GTE predicate on the "column" field.
func ColumnGTE(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldColumn, v))
}

// ColumnLT applies the LT predicate on the "column" field.
func ColumnLT(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldColumn, v))
}

// ColumnLTE applies the LTE predicate on the "column" field.
func ColumnLTE(v int16) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldColumn, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.NotPredicates(p))
}

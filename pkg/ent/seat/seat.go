// Code generated by ent, DO NOT EDIT.

package seat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seat type in the database.
	Label = "seat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRow holds the string denoting the row field in the database.
	FieldRow = "row"
	// FieldColumn holds the string denoting the column field in the database.
	FieldColumn = "column"
	// EdgeCinema holds the string denoting the cinema edge name in mutations.
	EdgeCinema = "cinema"
	// EdgeSeatReservations holds the string denoting the seat_reservations edge name in mutations.
	EdgeSeatReservations = "seat_reservations"
	// Table holds the table name of the seat in the database.
	Table = "seats"
	// CinemaTable is the table that holds the cinema relation/edge.
	CinemaTable = "seats"
	// CinemaInverseTable is the table name for the Cinema entity.
	// It exists in this package in order to avoid circular dependency with the "cinema" package.
	CinemaInverseTable = "cinemas"
	// CinemaColumn is the table column denoting the cinema relation/edge.
	CinemaColumn = "cinema_seats"
	// SeatReservationsTable is the table that holds the seat_reservations relation/edge.
	SeatReservationsTable = "seat_reservations"
	// SeatReservationsInverseTable is the table name for the SeatReservation entity.
	// It exists in this package in order to avoid circular dependency with the "seatreservation" package.
	SeatReservationsInverseTable = "seat_reservations"
	// SeatReservationsColumn is the table column denoting the seat_reservations relation/edge.
	SeatReservationsColumn = "seat_seat_reservations"
)

// Columns holds all SQL columns for seat fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRow,
	FieldColumn,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cinema_seats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// RowValidator is a validator for the "row" field. It is called by the builders before save.
	RowValidator func(int16) error
	// ColumnValidator is a validator for the "column" field. It is called by the builders before save.
	ColumnValidator func(int16) error
)

// OrderOption defines the ordering options for the Seat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRow orders the results by the row field.
func ByRow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRow, opts...).ToFunc()
}

// ByColumn orders the results by the column field.
func ByColumn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColumn, opts...).ToFunc()
}

// ByCinemaField orders the results by cinema field.
func ByCinemaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCinemaStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatReservationsCount orders the results by seat_reservations count.
func BySeatReservationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeatReservationsStep(), opts...)
	}
}

// BySeatReservations orders the results by seat_reservations terms.
func BySeatReservations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatReservationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCinemaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CinemaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CinemaTable, CinemaColumn),
	)
}
func newSeatReservationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatReservationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeatReservationsTable, SeatReservationsColumn),
	)
}

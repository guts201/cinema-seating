// Code generated by ent, DO NOT EDIT.

package ent

import (
	entcinema "cinema/pkg/ent/cinema"
	"cinema/pkg/ent/movie"
	"cinema/pkg/ent/screening"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Screening is the model entity for the Screening schema.
type Screening struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScreeningQuery when eager-loading is set.
	Edges             ScreeningEdges `json:"edges"`
	cinema_screenings *int64
	movie_screenings  *int64
	selectValues      sql.SelectValues
}

// ScreeningEdges holds the relations/edges for other nodes in the graph.
type ScreeningEdges struct {
	// Movie holds the value of the movie edge.
	Movie *Movie `json:"movie,omitempty"`
	// Cinema holds the value of the cinema edge.
	Cinema *Cinema `json:"cinema,omitempty"`
	// SeatReservations holds the value of the seat_reservations edge.
	SeatReservations []*SeatReservation `json:"seat_reservations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MovieOrErr returns the Movie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningEdges) MovieOrErr() (*Movie, error) {
	if e.Movie != nil {
		return e.Movie, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: movie.Label}
	}
	return nil, &NotLoadedError{edge: "movie"}
}

// CinemaOrErr returns the Cinema value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScreeningEdges) CinemaOrErr() (*Cinema, error) {
	if e.Cinema != nil {
		return e.Cinema, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: entcinema.Label}
	}
	return nil, &NotLoadedError{edge: "cinema"}
}

// SeatReservationsOrErr returns the SeatReservations value or an error if the edge
// was not loaded in eager-loading.
func (e ScreeningEdges) SeatReservationsOrErr() ([]*SeatReservation, error) {
	if e.loadedTypes[2] {
		return e.SeatReservations, nil
	}
	return nil, &NotLoadedError{edge: "seat_reservations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Screening) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case screening.FieldID:
			values[i] = new(sql.NullInt64)
		case screening.FieldTitle:
			values[i] = new(sql.NullString)
		case screening.FieldCreatedAt, screening.FieldUpdatedAt, screening.FieldStartTime:
			values[i] = new(sql.NullTime)
		case screening.ForeignKeys[0]: // cinema_screenings
			values[i] = new(sql.NullInt64)
		case screening.ForeignKeys[1]: // movie_screenings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Screening fields.
func (s *Screening) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case screening.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case screening.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case screening.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case screening.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case screening.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				s.StartTime = value.Time
			}
		case screening.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cinema_screenings", value)
			} else if value.Valid {
				s.cinema_screenings = new(int64)
				*s.cinema_screenings = int64(value.Int64)
			}
		case screening.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field movie_screenings", value)
			} else if value.Valid {
				s.movie_screenings = new(int64)
				*s.movie_screenings = int64(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Screening.
// This includes values selected through modifiers, order, etc.
func (s *Screening) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryMovie queries the "movie" edge of the Screening entity.
func (s *Screening) QueryMovie() *MovieQuery {
	return NewScreeningClient(s.config).QueryMovie(s)
}

// QueryCinema queries the "cinema" edge of the Screening entity.
func (s *Screening) QueryCinema() *CinemaQuery {
	return NewScreeningClient(s.config).QueryCinema(s)
}

// QuerySeatReservations queries the "seat_reservations" edge of the Screening entity.
func (s *Screening) QuerySeatReservations() *SeatReservationQuery {
	return NewScreeningClient(s.config).QuerySeatReservations(s)
}

// Update returns a builder for updating this Screening.
// Note that you need to call Screening.Unwrap() before calling this method if this Screening
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Screening) Update() *ScreeningUpdateOne {
	return NewScreeningClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Screening entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Screening) Unwrap() *Screening {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Screening is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Screening) String() string {
	var builder strings.Builder
	builder.WriteString("Screening(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(s.StartTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Screenings is a parsable slice of Screening.
type Screenings []*Screening

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/cinema"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Cinema is the model entity for the Cinema schema.
type Cinema struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// NumRow holds the value of the "num_row" field.
	NumRow int64 `json:"num_row,omitempty"`
	// NumColumn holds the value of the "num_column" field.
	NumColumn int64 `json:"num_column,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cinema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cinema.FieldID, cinema.FieldNumRow, cinema.FieldNumColumn:
			values[i] = new(sql.NullInt64)
		case cinema.FieldName, cinema.FieldAddress:
			values[i] = new(sql.NullString)
		case cinema.FieldCreatedAt, cinema.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cinema fields.
func (c *Cinema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cinema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case cinema.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cinema.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cinema.FieldNumRow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_row", values[i])
			} else if value.Valid {
				c.NumRow = value.Int64
			}
		case cinema.FieldNumColumn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_column", values[i])
			} else if value.Valid {
				c.NumColumn = value.Int64
			}
		case cinema.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cinema.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cinema.
// This includes values selected through modifiers, order, etc.
func (c *Cinema) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Cinema.
// Note that you need to call Cinema.Unwrap() before calling this method if this Cinema
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cinema) Update() *CinemaUpdateOne {
	return NewCinemaClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cinema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cinema) Unwrap() *Cinema {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cinema is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cinema) String() string {
	var builder strings.Builder
	builder.WriteString("Cinema(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("num_row=")
	builder.WriteString(fmt.Sprintf("%v", c.NumRow))
	builder.WriteString(", ")
	builder.WriteString("num_column=")
	builder.WriteString(fmt.Sprintf("%v", c.NumColumn))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteByte(')')
	return builder.String()
}

// Cinemas is a parsable slice of Cinema.
type Cinemas []*Cinema

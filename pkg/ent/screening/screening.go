// Code generated by ent, DO NOT EDIT.

package screening

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the screening type in the database.
	Label = "screening"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldMinDistance holds the string denoting the min_distance field in the database.
	FieldMinDistance = "min_distance"
	// EdgeMovie holds the string denoting the movie edge name in mutations.
	EdgeMovie = "movie"
	// EdgeCinema holds the string denoting the cinema edge name in mutations.
	EdgeCinema = "cinema"
	// EdgeSeatReservations holds the string denoting the seat_reservations edge name in mutations.
	EdgeSeatReservations = "seat_reservations"
	// Table holds the table name of the screening in the database.
	Table = "screenings"
	// MovieTable is the table that holds the movie relation/edge.
	MovieTable = "screenings"
	// MovieInverseTable is the table name for the Movie entity.
	// It exists in this package in order to avoid circular dependency with the "movie" package.
	MovieInverseTable = "movies"
	// MovieColumn is the table column denoting the movie relation/edge.
	MovieColumn = "movie_screenings"
	// CinemaTable is the table that holds the cinema relation/edge.
	CinemaTable = "screenings"
	// CinemaInverseTable is the table name for the Cinema entity.
	// It exists in this package in order to avoid circular dependency with the "cinema" package.
	CinemaInverseTable = "cinemas"
	// CinemaColumn is the table column denoting the cinema relation/edge.
	CinemaColumn = "cinema_screenings"
	// SeatReservationsTable is the table that holds the seat_reservations relation/edge.
	SeatReservationsTable = "seat_reservations"
	// SeatReservationsInverseTable is the table name for the SeatReservation entity.
	// It exists in this package in order to avoid circular dependency with the "seatreservation" package.
	SeatReservationsInverseTable = "seat_reservations"
	// SeatReservationsColumn is the table column denoting the seat_reservations relation/edge.
	SeatReservationsColumn = "screening_seat_reservations"
)

// Columns holds all SQL columns for screening fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTitle,
	FieldStartTime,
	FieldMinDistance,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "screenings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cinema_screenings",
	"movie_screenings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// MinDistanceValidator is a validator for the "min_distance" field. It is called by the builders before save.
	MinDistanceValidator func(int32) error
)

// OrderOption defines the ordering options for the Screening queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByMinDistance orders the results by the min_distance field.
func ByMinDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinDistance, opts...).ToFunc()
}

// ByMovieField orders the results by movie field.
func ByMovieField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovieStep(), sql.OrderByField(field, opts...))
	}
}

// ByCinemaField orders the results by cinema field.
func ByCinemaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCinemaStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatReservationsCount orders the results by seat_reservations count.
func BySeatReservationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeatReservationsStep(), opts...)
	}
}

// BySeatReservations orders the results by seat_reservations terms.
func BySeatReservations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatReservationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMovieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MovieTable, MovieColumn),
	)
}
func newCinemaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CinemaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CinemaTable, CinemaColumn),
	)
}
func newSeatReservationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatReservationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeatReservationsTable, SeatReservationsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/cinema"
	"cinema/pkg/ent/screening"
	"cinema/pkg/ent/seat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CinemaCreate is the builder for creating a Cinema entity.
type CinemaCreate struct {
	config
	mutation *CinemaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CinemaCreate) SetCreatedAt(t time.Time) *CinemaCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CinemaCreate) SetNillableCreatedAt(t *time.Time) *CinemaCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CinemaCreate) SetUpdatedAt(t time.Time) *CinemaCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CinemaCreate) SetNillableUpdatedAt(t *time.Time) *CinemaCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetNumRow sets the "num_row" field.
func (cc *CinemaCreate) SetNumRow(u uint32) *CinemaCreate {
	cc.mutation.SetNumRow(u)
	return cc
}

// SetNumColumn sets the "num_column" field.
func (cc *CinemaCreate) SetNumColumn(u uint32) *CinemaCreate {
	cc.mutation.SetNumColumn(u)
	return cc
}

// SetName sets the "name" field.
func (cc *CinemaCreate) SetName(s string) *CinemaCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetMinDistance sets the "min_distance" field.
func (cc *CinemaCreate) SetMinDistance(u uint32) *CinemaCreate {
	cc.mutation.SetMinDistance(u)
	return cc
}

// SetID sets the "id" field.
func (cc *CinemaCreate) SetID(i int64) *CinemaCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (cc *CinemaCreate) AddSeatIDs(ids ...int64) *CinemaCreate {
	cc.mutation.AddSeatIDs(ids...)
	return cc
}

// AddSeats adds the "seats" edges to the Seat entity.
func (cc *CinemaCreate) AddSeats(s ...*Seat) *CinemaCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSeatIDs(ids...)
}

// AddScreeningIDs adds the "screenings" edge to the Screening entity by IDs.
func (cc *CinemaCreate) AddScreeningIDs(ids ...int64) *CinemaCreate {
	cc.mutation.AddScreeningIDs(ids...)
	return cc
}

// AddScreenings adds the "screenings" edges to the Screening entity.
func (cc *CinemaCreate) AddScreenings(s ...*Screening) *CinemaCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddScreeningIDs(ids...)
}

// Mutation returns the CinemaMutation object of the builder.
func (cc *CinemaCreate) Mutation() *CinemaMutation {
	return cc.mutation
}

// Save creates the Cinema in the database.
func (cc *CinemaCreate) Save(ctx context.Context) (*Cinema, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CinemaCreate) SaveX(ctx context.Context) *Cinema {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CinemaCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CinemaCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CinemaCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cinema.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := cinema.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CinemaCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Cinema.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Cinema.updated_at"`)}
	}
	if _, ok := cc.mutation.NumRow(); !ok {
		return &ValidationError{Name: "num_row", err: errors.New(`ent: missing required field "Cinema.num_row"`)}
	}
	if v, ok := cc.mutation.NumRow(); ok {
		if err := cinema.NumRowValidator(v); err != nil {
			return &ValidationError{Name: "num_row", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_row": %w`, err)}
		}
	}
	if _, ok := cc.mutation.NumColumn(); !ok {
		return &ValidationError{Name: "num_column", err: errors.New(`ent: missing required field "Cinema.num_column"`)}
	}
	if v, ok := cc.mutation.NumColumn(); ok {
		if err := cinema.NumColumnValidator(v); err != nil {
			return &ValidationError{Name: "num_column", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_column": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Cinema.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := cinema.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cinema.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.MinDistance(); !ok {
		return &ValidationError{Name: "min_distance", err: errors.New(`ent: missing required field "Cinema.min_distance"`)}
	}
	if v, ok := cc.mutation.MinDistance(); ok {
		if err := cinema.MinDistanceValidator(v); err != nil {
			return &ValidationError{Name: "min_distance", err: fmt.Errorf(`ent: validator failed for field "Cinema.min_distance": %w`, err)}
		}
	}
	return nil
}

func (cc *CinemaCreate) sqlSave(ctx context.Context) (*Cinema, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CinemaCreate) createSpec() (*Cinema, *sqlgraph.CreateSpec) {
	var (
		_node = &Cinema{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cinema.Table, sqlgraph.NewFieldSpec(cinema.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(cinema.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(cinema.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.NumRow(); ok {
		_spec.SetField(cinema.FieldNumRow, field.TypeUint32, value)
		_node.NumRow = value
	}
	if value, ok := cc.mutation.NumColumn(); ok {
		_spec.SetField(cinema.FieldNumColumn, field.TypeUint32, value)
		_node.NumColumn = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(cinema.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.MinDistance(); ok {
		_spec.SetField(cinema.FieldMinDistance, field.TypeUint32, value)
		_node.MinDistance = value
	}
	if nodes := cc.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ScreeningsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cinema.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CinemaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CinemaCreate) OnConflict(opts ...sql.ConflictOption) *CinemaUpsertOne {
	cc.conflict = opts
	return &CinemaUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cinema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CinemaCreate) OnConflictColumns(columns ...string) *CinemaUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CinemaUpsertOne{
		create: cc,
	}
}

type (
	// CinemaUpsertOne is the builder for "upsert"-ing
	//  one Cinema node.
	CinemaUpsertOne struct {
		create *CinemaCreate
	}

	// CinemaUpsert is the "OnConflict" setter.
	CinemaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CinemaUpsert) SetUpdatedAt(v time.Time) *CinemaUpsert {
	u.Set(cinema.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CinemaUpsert) UpdateUpdatedAt() *CinemaUpsert {
	u.SetExcluded(cinema.FieldUpdatedAt)
	return u
}

// SetNumRow sets the "num_row" field.
func (u *CinemaUpsert) SetNumRow(v uint32) *CinemaUpsert {
	u.Set(cinema.FieldNumRow, v)
	return u
}

// UpdateNumRow sets the "num_row" field to the value that was provided on create.
func (u *CinemaUpsert) UpdateNumRow() *CinemaUpsert {
	u.SetExcluded(cinema.FieldNumRow)
	return u
}

// AddNumRow adds v to the "num_row" field.
func (u *CinemaUpsert) AddNumRow(v uint32) *CinemaUpsert {
	u.Add(cinema.FieldNumRow, v)
	return u
}

// SetNumColumn sets the "num_column" field.
func (u *CinemaUpsert) SetNumColumn(v uint32) *CinemaUpsert {
	u.Set(cinema.FieldNumColumn, v)
	return u
}

// UpdateNumColumn sets the "num_column" field to the value that was provided on create.
func (u *CinemaUpsert) UpdateNumColumn() *CinemaUpsert {
	u.SetExcluded(cinema.FieldNumColumn)
	return u
}

// AddNumColumn adds v to the "num_column" field.
func (u *CinemaUpsert) AddNumColumn(v uint32) *CinemaUpsert {
	u.Add(cinema.FieldNumColumn, v)
	return u
}

// SetName sets the "name" field.
func (u *CinemaUpsert) SetName(v string) *CinemaUpsert {
	u.Set(cinema.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CinemaUpsert) UpdateName() *CinemaUpsert {
	u.SetExcluded(cinema.FieldName)
	return u
}

// SetMinDistance sets the "min_distance" field.
func (u *CinemaUpsert) SetMinDistance(v uint32) *CinemaUpsert {
	u.Set(cinema.FieldMinDistance, v)
	return u
}

// UpdateMinDistance sets the "min_distance" field to the value that was provided on create.
func (u *CinemaUpsert) UpdateMinDistance() *CinemaUpsert {
	u.SetExcluded(cinema.FieldMinDistance)
	return u
}

// AddMinDistance adds v to the "min_distance" field.
func (u *CinemaUpsert) AddMinDistance(v uint32) *CinemaUpsert {
	u.Add(cinema.FieldMinDistance, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Cinema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cinema.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CinemaUpsertOne) UpdateNewValues() *CinemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cinema.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cinema.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cinema.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CinemaUpsertOne) Ignore() *CinemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CinemaUpsertOne) DoNothing() *CinemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CinemaCreate.OnConflict
// documentation for more info.
func (u *CinemaUpsertOne) Update(set func(*CinemaUpsert)) *CinemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CinemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CinemaUpsertOne) SetUpdatedAt(v time.Time) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CinemaUpsertOne) UpdateUpdatedAt() *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNumRow sets the "num_row" field.
func (u *CinemaUpsertOne) SetNumRow(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.SetNumRow(v)
	})
}

// AddNumRow adds v to the "num_row" field.
func (u *CinemaUpsertOne) AddNumRow(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.AddNumRow(v)
	})
}

// UpdateNumRow sets the "num_row" field to the value that was provided on create.
func (u *CinemaUpsertOne) UpdateNumRow() *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateNumRow()
	})
}

// SetNumColumn sets the "num_column" field.
func (u *CinemaUpsertOne) SetNumColumn(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.SetNumColumn(v)
	})
}

// AddNumColumn adds v to the "num_column" field.
func (u *CinemaUpsertOne) AddNumColumn(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.AddNumColumn(v)
	})
}

// UpdateNumColumn sets the "num_column" field to the value that was provided on create.
func (u *CinemaUpsertOne) UpdateNumColumn() *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateNumColumn()
	})
}

// SetName sets the "name" field.
func (u *CinemaUpsertOne) SetName(v string) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CinemaUpsertOne) UpdateName() *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateName()
	})
}

// SetMinDistance sets the "min_distance" field.
func (u *CinemaUpsertOne) SetMinDistance(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.SetMinDistance(v)
	})
}

// AddMinDistance adds v to the "min_distance" field.
func (u *CinemaUpsertOne) AddMinDistance(v uint32) *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.AddMinDistance(v)
	})
}

// UpdateMinDistance sets the "min_distance" field to the value that was provided on create.
func (u *CinemaUpsertOne) UpdateMinDistance() *CinemaUpsertOne {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateMinDistance()
	})
}

// Exec executes the query.
func (u *CinemaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CinemaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CinemaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CinemaUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CinemaUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CinemaCreateBulk is the builder for creating many Cinema entities in bulk.
type CinemaCreateBulk struct {
	config
	err      error
	builders []*CinemaCreate
	conflict []sql.ConflictOption
}

// Save creates the Cinema entities in the database.
func (ccb *CinemaCreateBulk) Save(ctx context.Context) ([]*Cinema, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cinema, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CinemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CinemaCreateBulk) SaveX(ctx context.Context) []*Cinema {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CinemaCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CinemaCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cinema.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CinemaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CinemaCreateBulk) OnConflict(opts ...sql.ConflictOption) *CinemaUpsertBulk {
	ccb.conflict = opts
	return &CinemaUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cinema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CinemaCreateBulk) OnConflictColumns(columns ...string) *CinemaUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CinemaUpsertBulk{
		create: ccb,
	}
}

// CinemaUpsertBulk is the builder for "upsert"-ing
// a bulk of Cinema nodes.
type CinemaUpsertBulk struct {
	create *CinemaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cinema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cinema.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CinemaUpsertBulk) UpdateNewValues() *CinemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cinema.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cinema.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cinema.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CinemaUpsertBulk) Ignore() *CinemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CinemaUpsertBulk) DoNothing() *CinemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CinemaCreateBulk.OnConflict
// documentation for more info.
func (u *CinemaUpsertBulk) Update(set func(*CinemaUpsert)) *CinemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CinemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CinemaUpsertBulk) SetUpdatedAt(v time.Time) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CinemaUpsertBulk) UpdateUpdatedAt() *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNumRow sets the "num_row" field.
func (u *CinemaUpsertBulk) SetNumRow(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.SetNumRow(v)
	})
}

// AddNumRow adds v to the "num_row" field.
func (u *CinemaUpsertBulk) AddNumRow(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.AddNumRow(v)
	})
}

// UpdateNumRow sets the "num_row" field to the value that was provided on create.
func (u *CinemaUpsertBulk) UpdateNumRow() *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateNumRow()
	})
}

// SetNumColumn sets the "num_column" field.
func (u *CinemaUpsertBulk) SetNumColumn(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.SetNumColumn(v)
	})
}

// AddNumColumn adds v to the "num_column" field.
func (u *CinemaUpsertBulk) AddNumColumn(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.AddNumColumn(v)
	})
}

// UpdateNumColumn sets the "num_column" field to the value that was provided on create.
func (u *CinemaUpsertBulk) UpdateNumColumn() *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateNumColumn()
	})
}

// SetName sets the "name" field.
func (u *CinemaUpsertBulk) SetName(v string) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CinemaUpsertBulk) UpdateName() *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateName()
	})
}

// SetMinDistance sets the "min_distance" field.
func (u *CinemaUpsertBulk) SetMinDistance(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.SetMinDistance(v)
	})
}

// AddMinDistance adds v to the "min_distance" field.
func (u *CinemaUpsertBulk) AddMinDistance(v uint32) *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.AddMinDistance(v)
	})
}

// UpdateMinDistance sets the "min_distance" field to the value that was provided on create.
func (u *CinemaUpsertBulk) UpdateMinDistance() *CinemaUpsertBulk {
	return u.Update(func(s *CinemaUpsert) {
		s.UpdateMinDistance()
	})
}

// Exec executes the query.
func (u *CinemaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CinemaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CinemaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CinemaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

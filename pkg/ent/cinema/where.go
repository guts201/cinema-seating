// Code generated by ent, DO NOT EDIT.

package cinema

import (
	"cinema/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldUpdatedAt, v))
}

// NumRow applies equality check predicate on the "num_row" field. It's identical to NumRowEQ.
func NumRow(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldNumRow, v))
}

// NumColumn applies equality check predicate on the "num_column" field. It's identical to NumColumnEQ.
func NumColumn(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldNumColumn, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldName, v))
}

// MinDistance applies equality check predicate on the "min_distance" field. It's identical to MinDistanceEQ.
func MinDistance(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldMinDistance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldUpdatedAt, v))
}

// NumRowEQ applies the EQ predicate on the "num_row" field.
func NumRowEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldNumRow, v))
}

// NumRowNEQ applies the NEQ predicate on the "num_row" field.
func NumRowNEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldNumRow, v))
}

// NumRowIn applies the In predicate on the "num_row" field.
func NumRowIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldNumRow, vs...))
}

// NumRowNotIn applies the NotIn predicate on the "num_row" field.
func NumRowNotIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldNumRow, vs...))
}

// NumRowGT applies the GT predicate on the "num_row" field.
func NumRowGT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldNumRow, v))
}

// NumRowGTE applies the GTE predicate on the "num_row" field.
func NumRowGTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldNumRow, v))
}

// NumRowLT applies the LT predicate on the "num_row" field.
func NumRowLT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldNumRow, v))
}

// NumRowLTE applies the LTE predicate on the "num_row" field.
func NumRowLTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldNumRow, v))
}

// NumColumnEQ applies the EQ predicate on the "num_column" field.
func NumColumnEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldNumColumn, v))
}

// NumColumnNEQ applies the NEQ predicate on the "num_column" field.
func NumColumnNEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldNumColumn, v))
}

// NumColumnIn applies the In predicate on the "num_column" field.
func NumColumnIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldNumColumn, vs...))
}

// NumColumnNotIn applies the NotIn predicate on the "num_column" field.
func NumColumnNotIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldNumColumn, vs...))
}

// NumColumnGT applies the GT predicate on the "num_column" field.
func NumColumnGT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldNumColumn, v))
}

// NumColumnGTE applies the GTE predicate on the "num_column" field.
func NumColumnGTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldNumColumn, v))
}

// NumColumnLT applies the LT predicate on the "num_column" field.
func NumColumnLT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldNumColumn, v))
}

// NumColumnLTE applies the LTE predicate on the "num_column" field.
func NumColumnLTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldNumColumn, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Cinema {
	return predicate.Cinema(sql.FieldContainsFold(FieldName, v))
}

// MinDistanceEQ applies the EQ predicate on the "min_distance" field.
func MinDistanceEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldEQ(FieldMinDistance, v))
}

// MinDistanceNEQ applies the NEQ predicate on the "min_distance" field.
func MinDistanceNEQ(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNEQ(FieldMinDistance, v))
}

// MinDistanceIn applies the In predicate on the "min_distance" field.
func MinDistanceIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldIn(FieldMinDistance, vs...))
}

// MinDistanceNotIn applies the NotIn predicate on the "min_distance" field.
func MinDistanceNotIn(vs ...uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldNotIn(FieldMinDistance, vs...))
}

// MinDistanceGT applies the GT predicate on the "min_distance" field.
func MinDistanceGT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGT(FieldMinDistance, v))
}

// MinDistanceGTE applies the GTE predicate on the "min_distance" field.
func MinDistanceGTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldGTE(FieldMinDistance, v))
}

// MinDistanceLT applies the LT predicate on the "min_distance" field.
func MinDistanceLT(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLT(FieldMinDistance, v))
}

// MinDistanceLTE applies the LTE predicate on the "min_distance" field.
func MinDistanceLTE(v uint32) predicate.Cinema {
	return predicate.Cinema(sql.FieldLTE(FieldMinDistance, v))
}

// HasSeats applies the HasEdge predicate on the "seats" edge.
func HasSeats() predicate.Cinema {
	return predicate.Cinema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeatsTable, SeatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeatsWith applies the HasEdge predicate on the "seats" edge with a given conditions (other predicates).
func HasSeatsWith(preds ...predicate.Seat) predicate.Cinema {
	return predicate.Cinema(func(s *sql.Selector) {
		step := newSeatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScreenings applies the HasEdge predicate on the "screenings" edge.
func HasScreenings() predicate.Cinema {
	return predicate.Cinema(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScreeningsTable, ScreeningsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScreeningsWith applies the HasEdge predicate on the "screenings" edge with a given conditions (other predicates).
func HasScreeningsWith(preds ...predicate.Screening) predicate.Cinema {
	return predicate.Cinema(func(s *sql.Selector) {
		step := newScreeningsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cinema) predicate.Cinema {
	return predicate.Cinema(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cinema) predicate.Cinema {
	return predicate.Cinema(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cinema) predicate.Cinema {
	return predicate.Cinema(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/cinema"
	"cinema/pkg/ent/movie"
	"cinema/pkg/ent/predicate"
	"cinema/pkg/ent/screening"
	"cinema/pkg/ent/seat"
	"cinema/pkg/ent/seatreservation"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCinema          = "Cinema"
	TypeMovie           = "Movie"
	TypeScreening       = "Screening"
	TypeSeat            = "Seat"
	TypeSeatReservation = "SeatReservation"
)

// CinemaMutation represents an operation that mutates the Cinema nodes in the graph.
type CinemaMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	created_at        *time.Time
	updated_at        *time.Time
	num_row           *uint32
	addnum_row        *int32
	num_column        *uint32
	addnum_column     *int32
	name              *string
	min_distance      *uint32
	addmin_distance   *int32
	clearedFields     map[string]struct{}
	seats             map[int64]struct{}
	removedseats      map[int64]struct{}
	clearedseats      bool
	screenings        map[int64]struct{}
	removedscreenings map[int64]struct{}
	clearedscreenings bool
	done              bool
	oldValue          func(context.Context) (*Cinema, error)
	predicates        []predicate.Cinema
}

var _ ent.Mutation = (*CinemaMutation)(nil)

// cinemaOption allows management of the mutation configuration using functional options.
type cinemaOption func(*CinemaMutation)

// newCinemaMutation creates new mutation for the Cinema entity.
func newCinemaMutation(c config, op Op, opts ...cinemaOption) *CinemaMutation {
	m := &CinemaMutation{
		config:        c,
		op:            op,
		typ:           TypeCinema,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCinemaID sets the ID field of the mutation.
func withCinemaID(id int64) cinemaOption {
	return func(m *CinemaMutation) {
		var (
			err   error
			once  sync.Once
			value *Cinema
		)
		m.oldValue = func(ctx context.Context) (*Cinema, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cinema.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCinema sets the old Cinema of the mutation.
func withCinema(node *Cinema) cinemaOption {
	return func(m *CinemaMutation) {
		m.oldValue = func(context.Context) (*Cinema, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CinemaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CinemaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cinema entities.
func (m *CinemaMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CinemaMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CinemaMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cinema.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CinemaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CinemaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CinemaMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CinemaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CinemaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CinemaMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetNumRow sets the "num_row" field.
func (m *CinemaMutation) SetNumRow(u uint32) {
	m.num_row = &u
	m.addnum_row = nil
}

// NumRow returns the value of the "num_row" field in the mutation.
func (m *CinemaMutation) NumRow() (r uint32, exists bool) {
	v := m.num_row
	if v == nil {
		return
	}
	return *v, true
}

// OldNumRow returns the old "num_row" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldNumRow(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumRow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumRow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumRow: %w", err)
	}
	return oldValue.NumRow, nil
}

// AddNumRow adds u to the "num_row" field.
func (m *CinemaMutation) AddNumRow(u int32) {
	if m.addnum_row != nil {
		*m.addnum_row += u
	} else {
		m.addnum_row = &u
	}
}

// AddedNumRow returns the value that was added to the "num_row" field in this mutation.
func (m *CinemaMutation) AddedNumRow() (r int32, exists bool) {
	v := m.addnum_row
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumRow resets all changes to the "num_row" field.
func (m *CinemaMutation) ResetNumRow() {
	m.num_row = nil
	m.addnum_row = nil
}

// SetNumColumn sets the "num_column" field.
func (m *CinemaMutation) SetNumColumn(u uint32) {
	m.num_column = &u
	m.addnum_column = nil
}

// NumColumn returns the value of the "num_column" field in the mutation.
func (m *CinemaMutation) NumColumn() (r uint32, exists bool) {
	v := m.num_column
	if v == nil {
		return
	}
	return *v, true
}

// OldNumColumn returns the old "num_column" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldNumColumn(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumColumn: %w", err)
	}
	return oldValue.NumColumn, nil
}

// AddNumColumn adds u to the "num_column" field.
func (m *CinemaMutation) AddNumColumn(u int32) {
	if m.addnum_column != nil {
		*m.addnum_column += u
	} else {
		m.addnum_column = &u
	}
}

// AddedNumColumn returns the value that was added to the "num_column" field in this mutation.
func (m *CinemaMutation) AddedNumColumn() (r int32, exists bool) {
	v := m.addnum_column
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumColumn resets all changes to the "num_column" field.
func (m *CinemaMutation) ResetNumColumn() {
	m.num_column = nil
	m.addnum_column = nil
}

// SetName sets the "name" field.
func (m *CinemaMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CinemaMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CinemaMutation) ResetName() {
	m.name = nil
}

// SetMinDistance sets the "min_distance" field.
func (m *CinemaMutation) SetMinDistance(u uint32) {
	m.min_distance = &u
	m.addmin_distance = nil
}

// MinDistance returns the value of the "min_distance" field in the mutation.
func (m *CinemaMutation) MinDistance() (r uint32, exists bool) {
	v := m.min_distance
	if v == nil {
		return
	}
	return *v, true
}

// OldMinDistance returns the old "min_distance" field's value of the Cinema entity.
// If the Cinema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CinemaMutation) OldMinDistance(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinDistance: %w", err)
	}
	return oldValue.MinDistance, nil
}

// AddMinDistance adds u to the "min_distance" field.
func (m *CinemaMutation) AddMinDistance(u int32) {
	if m.addmin_distance != nil {
		*m.addmin_distance += u
	} else {
		m.addmin_distance = &u
	}
}

// AddedMinDistance returns the value that was added to the "min_distance" field in this mutation.
func (m *CinemaMutation) AddedMinDistance() (r int32, exists bool) {
	v := m.addmin_distance
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinDistance resets all changes to the "min_distance" field.
func (m *CinemaMutation) ResetMinDistance() {
	m.min_distance = nil
	m.addmin_distance = nil
}

// AddSeatIDs adds the "seats" edge to the Seat entity by ids.
func (m *CinemaMutation) AddSeatIDs(ids ...int64) {
	if m.seats == nil {
		m.seats = make(map[int64]struct{})
	}
	for i := range ids {
		m.seats[ids[i]] = struct{}{}
	}
}

// ClearSeats clears the "seats" edge to the Seat entity.
func (m *CinemaMutation) ClearSeats() {
	m.clearedseats = true
}

// SeatsCleared reports if the "seats" edge to the Seat entity was cleared.
func (m *CinemaMutation) SeatsCleared() bool {
	return m.clearedseats
}

// RemoveSeatIDs removes the "seats" edge to the Seat entity by IDs.
func (m *CinemaMutation) RemoveSeatIDs(ids ...int64) {
	if m.removedseats == nil {
		m.removedseats = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.seats, ids[i])
		m.removedseats[ids[i]] = struct{}{}
	}
}

// RemovedSeats returns the removed IDs of the "seats" edge to the Seat entity.
func (m *CinemaMutation) RemovedSeatsIDs() (ids []int64) {
	for id := range m.removedseats {
		ids = append(ids, id)
	}
	return
}

// SeatsIDs returns the "seats" edge IDs in the mutation.
func (m *CinemaMutation) SeatsIDs() (ids []int64) {
	for id := range m.seats {
		ids = append(ids, id)
	}
	return
}

// ResetSeats resets all changes to the "seats" edge.
func (m *CinemaMutation) ResetSeats() {
	m.seats = nil
	m.clearedseats = false
	m.removedseats = nil
}

// AddScreeningIDs adds the "screenings" edge to the Screening entity by ids.
func (m *CinemaMutation) AddScreeningIDs(ids ...int64) {
	if m.screenings == nil {
		m.screenings = make(map[int64]struct{})
	}
	for i := range ids {
		m.screenings[ids[i]] = struct{}{}
	}
}

// ClearScreenings clears the "screenings" edge to the Screening entity.
func (m *CinemaMutation) ClearScreenings() {
	m.clearedscreenings = true
}

// ScreeningsCleared reports if the "screenings" edge to the Screening entity was cleared.
func (m *CinemaMutation) ScreeningsCleared() bool {
	return m.clearedscreenings
}

// RemoveScreeningIDs removes the "screenings" edge to the Screening entity by IDs.
func (m *CinemaMutation) RemoveScreeningIDs(ids ...int64) {
	if m.removedscreenings == nil {
		m.removedscreenings = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.screenings, ids[i])
		m.removedscreenings[ids[i]] = struct{}{}
	}
}

// RemovedScreenings returns the removed IDs of the "screenings" edge to the Screening entity.
func (m *CinemaMutation) RemovedScreeningsIDs() (ids []int64) {
	for id := range m.removedscreenings {
		ids = append(ids, id)
	}
	return
}

// ScreeningsIDs returns the "screenings" edge IDs in the mutation.
func (m *CinemaMutation) ScreeningsIDs() (ids []int64) {
	for id := range m.screenings {
		ids = append(ids, id)
	}
	return
}

// ResetScreenings resets all changes to the "screenings" edge.
func (m *CinemaMutation) ResetScreenings() {
	m.screenings = nil
	m.clearedscreenings = false
	m.removedscreenings = nil
}

// Where appends a list predicates to the CinemaMutation builder.
func (m *CinemaMutation) Where(ps ...predicate.Cinema) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CinemaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CinemaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cinema, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CinemaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CinemaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cinema).
func (m *CinemaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CinemaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, cinema.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cinema.FieldUpdatedAt)
	}
	if m.num_row != nil {
		fields = append(fields, cinema.FieldNumRow)
	}
	if m.num_column != nil {
		fields = append(fields, cinema.FieldNumColumn)
	}
	if m.name != nil {
		fields = append(fields, cinema.FieldName)
	}
	if m.min_distance != nil {
		fields = append(fields, cinema.FieldMinDistance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CinemaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cinema.FieldCreatedAt:
		return m.CreatedAt()
	case cinema.FieldUpdatedAt:
		return m.UpdatedAt()
	case cinema.FieldNumRow:
		return m.NumRow()
	case cinema.FieldNumColumn:
		return m.NumColumn()
	case cinema.FieldName:
		return m.Name()
	case cinema.FieldMinDistance:
		return m.MinDistance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CinemaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cinema.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cinema.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cinema.FieldNumRow:
		return m.OldNumRow(ctx)
	case cinema.FieldNumColumn:
		return m.OldNumColumn(ctx)
	case cinema.FieldName:
		return m.OldName(ctx)
	case cinema.FieldMinDistance:
		return m.OldMinDistance(ctx)
	}
	return nil, fmt.Errorf("unknown Cinema field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CinemaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cinema.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cinema.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cinema.FieldNumRow:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumRow(v)
		return nil
	case cinema.FieldNumColumn:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumColumn(v)
		return nil
	case cinema.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cinema.FieldMinDistance:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Cinema field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CinemaMutation) AddedFields() []string {
	var fields []string
	if m.addnum_row != nil {
		fields = append(fields, cinema.FieldNumRow)
	}
	if m.addnum_column != nil {
		fields = append(fields, cinema.FieldNumColumn)
	}
	if m.addmin_distance != nil {
		fields = append(fields, cinema.FieldMinDistance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CinemaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cinema.FieldNumRow:
		return m.AddedNumRow()
	case cinema.FieldNumColumn:
		return m.AddedNumColumn()
	case cinema.FieldMinDistance:
		return m.AddedMinDistance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CinemaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cinema.FieldNumRow:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumRow(v)
		return nil
	case cinema.FieldNumColumn:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumColumn(v)
		return nil
	case cinema.FieldMinDistance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Cinema numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CinemaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CinemaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CinemaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cinema nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CinemaMutation) ResetField(name string) error {
	switch name {
	case cinema.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cinema.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cinema.FieldNumRow:
		m.ResetNumRow()
		return nil
	case cinema.FieldNumColumn:
		m.ResetNumColumn()
		return nil
	case cinema.FieldName:
		m.ResetName()
		return nil
	case cinema.FieldMinDistance:
		m.ResetMinDistance()
		return nil
	}
	return fmt.Errorf("unknown Cinema field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CinemaMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.seats != nil {
		edges = append(edges, cinema.EdgeSeats)
	}
	if m.screenings != nil {
		edges = append(edges, cinema.EdgeScreenings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CinemaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cinema.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.seats))
		for id := range m.seats {
			ids = append(ids, id)
		}
		return ids
	case cinema.EdgeScreenings:
		ids := make([]ent.Value, 0, len(m.screenings))
		for id := range m.screenings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CinemaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedseats != nil {
		edges = append(edges, cinema.EdgeSeats)
	}
	if m.removedscreenings != nil {
		edges = append(edges, cinema.EdgeScreenings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CinemaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cinema.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.removedseats))
		for id := range m.removedseats {
			ids = append(ids, id)
		}
		return ids
	case cinema.EdgeScreenings:
		ids := make([]ent.Value, 0, len(m.removedscreenings))
		for id := range m.removedscreenings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CinemaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedseats {
		edges = append(edges, cinema.EdgeSeats)
	}
	if m.clearedscreenings {
		edges = append(edges, cinema.EdgeScreenings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CinemaMutation) EdgeCleared(name string) bool {
	switch name {
	case cinema.EdgeSeats:
		return m.clearedseats
	case cinema.EdgeScreenings:
		return m.clearedscreenings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CinemaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Cinema unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CinemaMutation) ResetEdge(name string) error {
	switch name {
	case cinema.EdgeSeats:
		m.ResetSeats()
		return nil
	case cinema.EdgeScreenings:
		m.ResetScreenings()
		return nil
	}
	return fmt.Errorf("unknown Cinema edge %s", name)
}

// MovieMutation represents an operation that mutates the Movie nodes in the graph.
type MovieMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	created_at        *time.Time
	updated_at        *time.Time
	title             *string
	duration          *uint64
	addduration       *int64
	clearedFields     map[string]struct{}
	screenings        map[int64]struct{}
	removedscreenings map[int64]struct{}
	clearedscreenings bool
	done              bool
	oldValue          func(context.Context) (*Movie, error)
	predicates        []predicate.Movie
}

var _ ent.Mutation = (*MovieMutation)(nil)

// movieOption allows management of the mutation configuration using functional options.
type movieOption func(*MovieMutation)

// newMovieMutation creates new mutation for the Movie entity.
func newMovieMutation(c config, op Op, opts ...movieOption) *MovieMutation {
	m := &MovieMutation{
		config:        c,
		op:            op,
		typ:           TypeMovie,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieID sets the ID field of the mutation.
func withMovieID(id int64) movieOption {
	return func(m *MovieMutation) {
		var (
			err   error
			once  sync.Once
			value *Movie
		)
		m.oldValue = func(ctx context.Context) (*Movie, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Movie.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovie sets the old Movie of the mutation.
func withMovie(node *Movie) movieOption {
	return func(m *MovieMutation) {
		m.oldValue = func(context.Context) (*Movie, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Movie entities.
func (m *MovieMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Movie.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MovieMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MovieMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MovieMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MovieMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MovieMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MovieMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTitle sets the "title" field.
func (m *MovieMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MovieMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MovieMutation) ResetTitle() {
	m.title = nil
}

// SetDuration sets the "duration" field.
func (m *MovieMutation) SetDuration(u uint64) {
	m.duration = &u
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *MovieMutation) Duration() (r uint64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldDuration(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds u to the "duration" field.
func (m *MovieMutation) AddDuration(u int64) {
	if m.addduration != nil {
		*m.addduration += u
	} else {
		m.addduration = &u
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *MovieMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *MovieMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// AddScreeningIDs adds the "screenings" edge to the Screening entity by ids.
func (m *MovieMutation) AddScreeningIDs(ids ...int64) {
	if m.screenings == nil {
		m.screenings = make(map[int64]struct{})
	}
	for i := range ids {
		m.screenings[ids[i]] = struct{}{}
	}
}

// ClearScreenings clears the "screenings" edge to the Screening entity.
func (m *MovieMutation) ClearScreenings() {
	m.clearedscreenings = true
}

// ScreeningsCleared reports if the "screenings" edge to the Screening entity was cleared.
func (m *MovieMutation) ScreeningsCleared() bool {
	return m.clearedscreenings
}

// RemoveScreeningIDs removes the "screenings" edge to the Screening entity by IDs.
func (m *MovieMutation) RemoveScreeningIDs(ids ...int64) {
	if m.removedscreenings == nil {
		m.removedscreenings = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.screenings, ids[i])
		m.removedscreenings[ids[i]] = struct{}{}
	}
}

// RemovedScreenings returns the removed IDs of the "screenings" edge to the Screening entity.
func (m *MovieMutation) RemovedScreeningsIDs() (ids []int64) {
	for id := range m.removedscreenings {
		ids = append(ids, id)
	}
	return
}

// ScreeningsIDs returns the "screenings" edge IDs in the mutation.
func (m *MovieMutation) ScreeningsIDs() (ids []int64) {
	for id := range m.screenings {
		ids = append(ids, id)
	}
	return
}

// ResetScreenings resets all changes to the "screenings" edge.
func (m *MovieMutation) ResetScreenings() {
	m.screenings = nil
	m.clearedscreenings = false
	m.removedscreenings = nil
}

// Where appends a list predicates to the MovieMutation builder.
func (m *MovieMutation) Where(ps ...predicate.Movie) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MovieMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MovieMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Movie, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MovieMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MovieMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Movie).
func (m *MovieMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, movie.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, movie.FieldUpdatedAt)
	}
	if m.title != nil {
		fields = append(fields, movie.FieldTitle)
	}
	if m.duration != nil {
		fields = append(fields, movie.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldCreatedAt:
		return m.CreatedAt()
	case movie.FieldUpdatedAt:
		return m.UpdatedAt()
	case movie.FieldTitle:
		return m.Title()
	case movie.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case movie.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case movie.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case movie.FieldTitle:
		return m.OldTitle(ctx)
	case movie.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Movie field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) SetField(name string, value ent.Value) error {
	switch name {
	case movie.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case movie.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case movie.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case movie.FieldDuration:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, movie.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) AddField(name string, value ent.Value) error {
	switch name {
	case movie.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Movie numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Movie nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieMutation) ResetField(name string) error {
	switch name {
	case movie.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case movie.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case movie.FieldTitle:
		m.ResetTitle()
		return nil
	case movie.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.screenings != nil {
		edges = append(edges, movie.EdgeScreenings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeScreenings:
		ids := make([]ent.Value, 0, len(m.screenings))
		for id := range m.screenings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedscreenings != nil {
		edges = append(edges, movie.EdgeScreenings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeScreenings:
		ids := make([]ent.Value, 0, len(m.removedscreenings))
		for id := range m.removedscreenings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscreenings {
		edges = append(edges, movie.EdgeScreenings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieMutation) EdgeCleared(name string) bool {
	switch name {
	case movie.EdgeScreenings:
		return m.clearedscreenings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Movie unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieMutation) ResetEdge(name string) error {
	switch name {
	case movie.EdgeScreenings:
		m.ResetScreenings()
		return nil
	}
	return fmt.Errorf("unknown Movie edge %s", name)
}

// ScreeningMutation represents an operation that mutates the Screening nodes in the graph.
type ScreeningMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	created_at               *time.Time
	updated_at               *time.Time
	title                    *string
	start_time               *time.Time
	min_distance             *int32
	addmin_distance          *int32
	clearedFields            map[string]struct{}
	movie                    *int64
	clearedmovie             bool
	cinema                   *int64
	clearedcinema            bool
	seat_reservations        map[int64]struct{}
	removedseat_reservations map[int64]struct{}
	clearedseat_reservations bool
	done                     bool
	oldValue                 func(context.Context) (*Screening, error)
	predicates               []predicate.Screening
}

var _ ent.Mutation = (*ScreeningMutation)(nil)

// screeningOption allows management of the mutation configuration using functional options.
type screeningOption func(*ScreeningMutation)

// newScreeningMutation creates new mutation for the Screening entity.
func newScreeningMutation(c config, op Op, opts ...screeningOption) *ScreeningMutation {
	m := &ScreeningMutation{
		config:        c,
		op:            op,
		typ:           TypeScreening,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScreeningID sets the ID field of the mutation.
func withScreeningID(id int64) screeningOption {
	return func(m *ScreeningMutation) {
		var (
			err   error
			once  sync.Once
			value *Screening
		)
		m.oldValue = func(ctx context.Context) (*Screening, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Screening.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScreening sets the old Screening of the mutation.
func withScreening(node *Screening) screeningOption {
	return func(m *ScreeningMutation) {
		m.oldValue = func(context.Context) (*Screening, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScreeningMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScreeningMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Screening entities.
func (m *ScreeningMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScreeningMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScreeningMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Screening.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ScreeningMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ScreeningMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Screening entity.
// If the Screening object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScreeningMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ScreeningMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ScreeningMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ScreeningMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Screening entity.
// If the Screening object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScreeningMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ScreeningMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTitle sets the "title" field.
func (m *ScreeningMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ScreeningMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Screening entity.
// If the Screening object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScreeningMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ScreeningMutation) ResetTitle() {
	m.title = nil
}

// SetStartTime sets the "start_time" field.
func (m *ScreeningMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ScreeningMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Screening entity.
// If the Screening object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScreeningMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ScreeningMutation) ResetStartTime() {
	m.start_time = nil
}

// SetMinDistance sets the "min_distance" field.
func (m *ScreeningMutation) SetMinDistance(i int32) {
	m.min_distance = &i
	m.addmin_distance = nil
}

// MinDistance returns the value of the "min_distance" field in the mutation.
func (m *ScreeningMutation) MinDistance() (r int32, exists bool) {
	v := m.min_distance
	if v == nil {
		return
	}
	return *v, true
}

// OldMinDistance returns the old "min_distance" field's value of the Screening entity.
// If the Screening object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScreeningMutation) OldMinDistance(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinDistance: %w", err)
	}
	return oldValue.MinDistance, nil
}

// AddMinDistance adds i to the "min_distance" field.
func (m *ScreeningMutation) AddMinDistance(i int32) {
	if m.addmin_distance != nil {
		*m.addmin_distance += i
	} else {
		m.addmin_distance = &i
	}
}

// AddedMinDistance returns the value that was added to the "min_distance" field in this mutation.
func (m *ScreeningMutation) AddedMinDistance() (r int32, exists bool) {
	v := m.addmin_distance
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinDistance resets all changes to the "min_distance" field.
func (m *ScreeningMutation) ResetMinDistance() {
	m.min_distance = nil
	m.addmin_distance = nil
}

// SetMovieID sets the "movie" edge to the Movie entity by id.
func (m *ScreeningMutation) SetMovieID(id int64) {
	m.movie = &id
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (m *ScreeningMutation) ClearMovie() {
	m.clearedmovie = true
}

// MovieCleared reports if the "movie" edge to the Movie entity was cleared.
func (m *ScreeningMutation) MovieCleared() bool {
	return m.clearedmovie
}

// MovieID returns the "movie" edge ID in the mutation.
func (m *ScreeningMutation) MovieID() (id int64, exists bool) {
	if m.movie != nil {
		return *m.movie, true
	}
	return
}

// MovieIDs returns the "movie" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MovieID instead. It exists only for internal usage by the builders.
func (m *ScreeningMutation) MovieIDs() (ids []int64) {
	if id := m.movie; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMovie resets all changes to the "movie" edge.
func (m *ScreeningMutation) ResetMovie() {
	m.movie = nil
	m.clearedmovie = false
}

// SetCinemaID sets the "cinema" edge to the Cinema entity by id.
func (m *ScreeningMutation) SetCinemaID(id int64) {
	m.cinema = &id
}

// ClearCinema clears the "cinema" edge to the Cinema entity.
func (m *ScreeningMutation) ClearCinema() {
	m.clearedcinema = true
}

// CinemaCleared reports if the "cinema" edge to the Cinema entity was cleared.
func (m *ScreeningMutation) CinemaCleared() bool {
	return m.clearedcinema
}

// CinemaID returns the "cinema" edge ID in the mutation.
func (m *ScreeningMutation) CinemaID() (id int64, exists bool) {
	if m.cinema != nil {
		return *m.cinema, true
	}
	return
}

// CinemaIDs returns the "cinema" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CinemaID instead. It exists only for internal usage by the builders.
func (m *ScreeningMutation) CinemaIDs() (ids []int64) {
	if id := m.cinema; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCinema resets all changes to the "cinema" edge.
func (m *ScreeningMutation) ResetCinema() {
	m.cinema = nil
	m.clearedcinema = false
}

// AddSeatReservationIDs adds the "seat_reservations" edge to the SeatReservation entity by ids.
func (m *ScreeningMutation) AddSeatReservationIDs(ids ...int64) {
	if m.seat_reservations == nil {
		m.seat_reservations = make(map[int64]struct{})
	}
	for i := range ids {
		m.seat_reservations[ids[i]] = struct{}{}
	}
}

// ClearSeatReservations clears the "seat_reservations" edge to the SeatReservation entity.
func (m *ScreeningMutation) ClearSeatReservations() {
	m.clearedseat_reservations = true
}

// SeatReservationsCleared reports if the "seat_reservations" edge to the SeatReservation entity was cleared.
func (m *ScreeningMutation) SeatReservationsCleared() bool {
	return m.clearedseat_reservations
}

// RemoveSeatReservationIDs removes the "seat_reservations" edge to the SeatReservation entity by IDs.
func (m *ScreeningMutation) RemoveSeatReservationIDs(ids ...int64) {
	if m.removedseat_reservations == nil {
		m.removedseat_reservations = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.seat_reservations, ids[i])
		m.removedseat_reservations[ids[i]] = struct{}{}
	}
}

// RemovedSeatReservations returns the removed IDs of the "seat_reservations" edge to the SeatReservation entity.
func (m *ScreeningMutation) RemovedSeatReservationsIDs() (ids []int64) {
	for id := range m.removedseat_reservations {
		ids = append(ids, id)
	}
	return
}

// SeatReservationsIDs returns the "seat_reservations" edge IDs in the mutation.
func (m *ScreeningMutation) SeatReservationsIDs() (ids []int64) {
	for id := range m.seat_reservations {
		ids = append(ids, id)
	}
	return
}

// ResetSeatReservations resets all changes to the "seat_reservations" edge.
func (m *ScreeningMutation) ResetSeatReservations() {
	m.seat_reservations = nil
	m.clearedseat_reservations = false
	m.removedseat_reservations = nil
}

// Where appends a list predicates to the ScreeningMutation builder.
func (m *ScreeningMutation) Where(ps ...predicate.Screening) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScreeningMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScreeningMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Screening, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScreeningMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScreeningMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Screening).
func (m *ScreeningMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScreeningMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, screening.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, screening.FieldUpdatedAt)
	}
	if m.title != nil {
		fields = append(fields, screening.FieldTitle)
	}
	if m.start_time != nil {
		fields = append(fields, screening.FieldStartTime)
	}
	if m.min_distance != nil {
		fields = append(fields, screening.FieldMinDistance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScreeningMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case screening.FieldCreatedAt:
		return m.CreatedAt()
	case screening.FieldUpdatedAt:
		return m.UpdatedAt()
	case screening.FieldTitle:
		return m.Title()
	case screening.FieldStartTime:
		return m.StartTime()
	case screening.FieldMinDistance:
		return m.MinDistance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScreeningMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case screening.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case screening.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case screening.FieldTitle:
		return m.OldTitle(ctx)
	case screening.FieldStartTime:
		return m.OldStartTime(ctx)
	case screening.FieldMinDistance:
		return m.OldMinDistance(ctx)
	}
	return nil, fmt.Errorf("unknown Screening field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScreeningMutation) SetField(name string, value ent.Value) error {
	switch name {
	case screening.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case screening.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case screening.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case screening.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case screening.FieldMinDistance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Screening field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScreeningMutation) AddedFields() []string {
	var fields []string
	if m.addmin_distance != nil {
		fields = append(fields, screening.FieldMinDistance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScreeningMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case screening.FieldMinDistance:
		return m.AddedMinDistance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScreeningMutation) AddField(name string, value ent.Value) error {
	switch name {
	case screening.FieldMinDistance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Screening numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScreeningMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScreeningMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScreeningMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Screening nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScreeningMutation) ResetField(name string) error {
	switch name {
	case screening.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case screening.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case screening.FieldTitle:
		m.ResetTitle()
		return nil
	case screening.FieldStartTime:
		m.ResetStartTime()
		return nil
	case screening.FieldMinDistance:
		m.ResetMinDistance()
		return nil
	}
	return fmt.Errorf("unknown Screening field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScreeningMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.movie != nil {
		edges = append(edges, screening.EdgeMovie)
	}
	if m.cinema != nil {
		edges = append(edges, screening.EdgeCinema)
	}
	if m.seat_reservations != nil {
		edges = append(edges, screening.EdgeSeatReservations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScreeningMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case screening.EdgeMovie:
		if id := m.movie; id != nil {
			return []ent.Value{*id}
		}
	case screening.EdgeCinema:
		if id := m.cinema; id != nil {
			return []ent.Value{*id}
		}
	case screening.EdgeSeatReservations:
		ids := make([]ent.Value, 0, len(m.seat_reservations))
		for id := range m.seat_reservations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScreeningMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedseat_reservations != nil {
		edges = append(edges, screening.EdgeSeatReservations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScreeningMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case screening.EdgeSeatReservations:
		ids := make([]ent.Value, 0, len(m.removedseat_reservations))
		for id := range m.removedseat_reservations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScreeningMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedmovie {
		edges = append(edges, screening.EdgeMovie)
	}
	if m.clearedcinema {
		edges = append(edges, screening.EdgeCinema)
	}
	if m.clearedseat_reservations {
		edges = append(edges, screening.EdgeSeatReservations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScreeningMutation) EdgeCleared(name string) bool {
	switch name {
	case screening.EdgeMovie:
		return m.clearedmovie
	case screening.EdgeCinema:
		return m.clearedcinema
	case screening.EdgeSeatReservations:
		return m.clearedseat_reservations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScreeningMutation) ClearEdge(name string) error {
	switch name {
	case screening.EdgeMovie:
		m.ClearMovie()
		return nil
	case screening.EdgeCinema:
		m.ClearCinema()
		return nil
	}
	return fmt.Errorf("unknown Screening unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScreeningMutation) ResetEdge(name string) error {
	switch name {
	case screening.EdgeMovie:
		m.ResetMovie()
		return nil
	case screening.EdgeCinema:
		m.ResetCinema()
		return nil
	case screening.EdgeSeatReservations:
		m.ResetSeatReservations()
		return nil
	}
	return fmt.Errorf("unknown Screening edge %s", name)
}

// SeatMutation represents an operation that mutates the Seat nodes in the graph.
type SeatMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	created_at               *time.Time
	updated_at               *time.Time
	row                      *int16
	addrow                   *int16
	column                   *int16
	addcolumn                *int16
	clearedFields            map[string]struct{}
	cinema                   *int64
	clearedcinema            bool
	seat_reservations        map[int64]struct{}
	removedseat_reservations map[int64]struct{}
	clearedseat_reservations bool
	done                     bool
	oldValue                 func(context.Context) (*Seat, error)
	predicates               []predicate.Seat
}

var _ ent.Mutation = (*SeatMutation)(nil)

// seatOption allows management of the mutation configuration using functional options.
type seatOption func(*SeatMutation)

// newSeatMutation creates new mutation for the Seat entity.
func newSeatMutation(c config, op Op, opts ...seatOption) *SeatMutation {
	m := &SeatMutation{
		config:        c,
		op:            op,
		typ:           TypeSeat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSeatID sets the ID field of the mutation.
func withSeatID(id int64) seatOption {
	return func(m *SeatMutation) {
		var (
			err   error
			once  sync.Once
			value *Seat
		)
		m.oldValue = func(ctx context.Context) (*Seat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Seat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeat sets the old Seat of the mutation.
func withSeat(node *Seat) seatOption {
	return func(m *SeatMutation) {
		m.oldValue = func(context.Context) (*Seat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SeatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SeatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Seat entities.
func (m *SeatMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SeatMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SeatMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Seat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SeatMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SeatMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SeatMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SeatMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SeatMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SeatMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRow sets the "row" field.
func (m *SeatMutation) SetRow(i int16) {
	m.row = &i
	m.addrow = nil
}

// Row returns the value of the "row" field in the mutation.
func (m *SeatMutation) Row() (r int16, exists bool) {
	v := m.row
	if v == nil {
		return
	}
	return *v, true
}

// OldRow returns the old "row" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldRow(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRow: %w", err)
	}
	return oldValue.Row, nil
}

// AddRow adds i to the "row" field.
func (m *SeatMutation) AddRow(i int16) {
	if m.addrow != nil {
		*m.addrow += i
	} else {
		m.addrow = &i
	}
}

// AddedRow returns the value that was added to the "row" field in this mutation.
func (m *SeatMutation) AddedRow() (r int16, exists bool) {
	v := m.addrow
	if v == nil {
		return
	}
	return *v, true
}

// ResetRow resets all changes to the "row" field.
func (m *SeatMutation) ResetRow() {
	m.row = nil
	m.addrow = nil
}

// SetColumn sets the "column" field.
func (m *SeatMutation) SetColumn(i int16) {
	m.column = &i
	m.addcolumn = nil
}

// Column returns the value of the "column" field in the mutation.
func (m *SeatMutation) Column() (r int16, exists bool) {
	v := m.column
	if v == nil {
		return
	}
	return *v, true
}

// OldColumn returns the old "column" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldColumn(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumn: %w", err)
	}
	return oldValue.Column, nil
}

// AddColumn adds i to the "column" field.
func (m *SeatMutation) AddColumn(i int16) {
	if m.addcolumn != nil {
		*m.addcolumn += i
	} else {
		m.addcolumn = &i
	}
}

// AddedColumn returns the value that was added to the "column" field in this mutation.
func (m *SeatMutation) AddedColumn() (r int16, exists bool) {
	v := m.addcolumn
	if v == nil {
		return
	}
	return *v, true
}

// ResetColumn resets all changes to the "column" field.
func (m *SeatMutation) ResetColumn() {
	m.column = nil
	m.addcolumn = nil
}

// SetCinemaID sets the "cinema" edge to the Cinema entity by id.
func (m *SeatMutation) SetCinemaID(id int64) {
	m.cinema = &id
}

// ClearCinema clears the "cinema" edge to the Cinema entity.
func (m *SeatMutation) ClearCinema() {
	m.clearedcinema = true
}

// CinemaCleared reports if the "cinema" edge to the Cinema entity was cleared.
func (m *SeatMutation) CinemaCleared() bool {
	return m.clearedcinema
}

// CinemaID returns the "cinema" edge ID in the mutation.
func (m *SeatMutation) CinemaID() (id int64, exists bool) {
	if m.cinema != nil {
		return *m.cinema, true
	}
	return
}

// CinemaIDs returns the "cinema" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CinemaID instead. It exists only for internal usage by the builders.
func (m *SeatMutation) CinemaIDs() (ids []int64) {
	if id := m.cinema; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCinema resets all changes to the "cinema" edge.
func (m *SeatMutation) ResetCinema() {
	m.cinema = nil
	m.clearedcinema = false
}

// AddSeatReservationIDs adds the "seat_reservations" edge to the SeatReservation entity by ids.
func (m *SeatMutation) AddSeatReservationIDs(ids ...int64) {
	if m.seat_reservations == nil {
		m.seat_reservations = make(map[int64]struct{})
	}
	for i := range ids {
		m.seat_reservations[ids[i]] = struct{}{}
	}
}

// ClearSeatReservations clears the "seat_reservations" edge to the SeatReservation entity.
func (m *SeatMutation) ClearSeatReservations() {
	m.clearedseat_reservations = true
}

// SeatReservationsCleared reports if the "seat_reservations" edge to the SeatReservation entity was cleared.
func (m *SeatMutation) SeatReservationsCleared() bool {
	return m.clearedseat_reservations
}

// RemoveSeatReservationIDs removes the "seat_reservations" edge to the SeatReservation entity by IDs.
func (m *SeatMutation) RemoveSeatReservationIDs(ids ...int64) {
	if m.removedseat_reservations == nil {
		m.removedseat_reservations = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.seat_reservations, ids[i])
		m.removedseat_reservations[ids[i]] = struct{}{}
	}
}

// RemovedSeatReservations returns the removed IDs of the "seat_reservations" edge to the SeatReservation entity.
func (m *SeatMutation) RemovedSeatReservationsIDs() (ids []int64) {
	for id := range m.removedseat_reservations {
		ids = append(ids, id)
	}
	return
}

// SeatReservationsIDs returns the "seat_reservations" edge IDs in the mutation.
func (m *SeatMutation) SeatReservationsIDs() (ids []int64) {
	for id := range m.seat_reservations {
		ids = append(ids, id)
	}
	return
}

// ResetSeatReservations resets all changes to the "seat_reservations" edge.
func (m *SeatMutation) ResetSeatReservations() {
	m.seat_reservations = nil
	m.clearedseat_reservations = false
	m.removedseat_reservations = nil
}

// Where appends a list predicates to the SeatMutation builder.
func (m *SeatMutation) Where(ps ...predicate.Seat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SeatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SeatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Seat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SeatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SeatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Seat).
func (m *SeatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SeatMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, seat.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, seat.FieldUpdatedAt)
	}
	if m.row != nil {
		fields = append(fields, seat.FieldRow)
	}
	if m.column != nil {
		fields = append(fields, seat.FieldColumn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SeatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case seat.FieldCreatedAt:
		return m.CreatedAt()
	case seat.FieldUpdatedAt:
		return m.UpdatedAt()
	case seat.FieldRow:
		return m.Row()
	case seat.FieldColumn:
		return m.Column()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SeatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case seat.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case seat.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case seat.FieldRow:
		return m.OldRow(ctx)
	case seat.FieldColumn:
		return m.OldColumn(ctx)
	}
	return nil, fmt.Errorf("unknown Seat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case seat.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case seat.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case seat.FieldRow:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRow(v)
		return nil
	case seat.FieldColumn:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumn(v)
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SeatMutation) AddedFields() []string {
	var fields []string
	if m.addrow != nil {
		fields = append(fields, seat.FieldRow)
	}
	if m.addcolumn != nil {
		fields = append(fields, seat.FieldColumn)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SeatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case seat.FieldRow:
		return m.AddedRow()
	case seat.FieldColumn:
		return m.AddedColumn()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case seat.FieldRow:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRow(v)
		return nil
	case seat.FieldColumn:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddColumn(v)
		return nil
	}
	return fmt.Errorf("unknown Seat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SeatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SeatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SeatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Seat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SeatMutation) ResetField(name string) error {
	switch name {
	case seat.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case seat.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case seat.FieldRow:
		m.ResetRow()
		return nil
	case seat.FieldColumn:
		m.ResetColumn()
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SeatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cinema != nil {
		edges = append(edges, seat.EdgeCinema)
	}
	if m.seat_reservations != nil {
		edges = append(edges, seat.EdgeSeatReservations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SeatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case seat.EdgeCinema:
		if id := m.cinema; id != nil {
			return []ent.Value{*id}
		}
	case seat.EdgeSeatReservations:
		ids := make([]ent.Value, 0, len(m.seat_reservations))
		for id := range m.seat_reservations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SeatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedseat_reservations != nil {
		edges = append(edges, seat.EdgeSeatReservations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SeatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case seat.EdgeSeatReservations:
		ids := make([]ent.Value, 0, len(m.removedseat_reservations))
		for id := range m.removedseat_reservations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SeatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcinema {
		edges = append(edges, seat.EdgeCinema)
	}
	if m.clearedseat_reservations {
		edges = append(edges, seat.EdgeSeatReservations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SeatMutation) EdgeCleared(name string) bool {
	switch name {
	case seat.EdgeCinema:
		return m.clearedcinema
	case seat.EdgeSeatReservations:
		return m.clearedseat_reservations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SeatMutation) ClearEdge(name string) error {
	switch name {
	case seat.EdgeCinema:
		m.ClearCinema()
		return nil
	}
	return fmt.Errorf("unknown Seat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SeatMutation) ResetEdge(name string) error {
	switch name {
	case seat.EdgeCinema:
		m.ResetCinema()
		return nil
	case seat.EdgeSeatReservations:
		m.ResetSeatReservations()
		return nil
	}
	return fmt.Errorf("unknown Seat edge %s", name)
}

// SeatReservationMutation represents an operation that mutates the SeatReservation nodes in the graph.
type SeatReservationMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	created_at       *time.Time
	updated_at       *time.Time
	reserved_at      *time.Time
	group_id         *uuid.UUID
	status           *seatreservation.Status
	start_time       *time.Time
	end_time         *time.Time
	clearedFields    map[string]struct{}
	seat             *int64
	clearedseat      bool
	screening        *int64
	clearedscreening bool
	done             bool
	oldValue         func(context.Context) (*SeatReservation, error)
	predicates       []predicate.SeatReservation
}

var _ ent.Mutation = (*SeatReservationMutation)(nil)

// seatreservationOption allows management of the mutation configuration using functional options.
type seatreservationOption func(*SeatReservationMutation)

// newSeatReservationMutation creates new mutation for the SeatReservation entity.
func newSeatReservationMutation(c config, op Op, opts ...seatreservationOption) *SeatReservationMutation {
	m := &SeatReservationMutation{
		config:        c,
		op:            op,
		typ:           TypeSeatReservation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSeatReservationID sets the ID field of the mutation.
func withSeatReservationID(id int64) seatreservationOption {
	return func(m *SeatReservationMutation) {
		var (
			err   error
			once  sync.Once
			value *SeatReservation
		)
		m.oldValue = func(ctx context.Context) (*SeatReservation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SeatReservation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeatReservation sets the old SeatReservation of the mutation.
func withSeatReservation(node *SeatReservation) seatreservationOption {
	return func(m *SeatReservationMutation) {
		m.oldValue = func(context.Context) (*SeatReservation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SeatReservationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SeatReservationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SeatReservation entities.
func (m *SeatReservationMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SeatReservationMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SeatReservationMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SeatReservation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SeatReservationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SeatReservationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SeatReservationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SeatReservationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SeatReservationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SeatReservationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetReservedAt sets the "reserved_at" field.
func (m *SeatReservationMutation) SetReservedAt(t time.Time) {
	m.reserved_at = &t
}

// ReservedAt returns the value of the "reserved_at" field in the mutation.
func (m *SeatReservationMutation) ReservedAt() (r time.Time, exists bool) {
	v := m.reserved_at
	if v == nil {
		return
	}
	return *v, true
}

// OldReservedAt returns the old "reserved_at" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldReservedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReservedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReservedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReservedAt: %w", err)
	}
	return oldValue.ReservedAt, nil
}

// ResetReservedAt resets all changes to the "reserved_at" field.
func (m *SeatReservationMutation) ResetReservedAt() {
	m.reserved_at = nil
}

// SetGroupID sets the "group_id" field.
func (m *SeatReservationMutation) SetGroupID(u uuid.UUID) {
	m.group_id = &u
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *SeatReservationMutation) GroupID() (r uuid.UUID, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldGroupID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *SeatReservationMutation) ResetGroupID() {
	m.group_id = nil
}

// SetStatus sets the "status" field.
func (m *SeatReservationMutation) SetStatus(s seatreservation.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SeatReservationMutation) Status() (r seatreservation.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldStatus(ctx context.Context) (v seatreservation.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SeatReservationMutation) ResetStatus() {
	m.status = nil
}

// SetStartTime sets the "start_time" field.
func (m *SeatReservationMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *SeatReservationMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *SeatReservationMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *SeatReservationMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *SeatReservationMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the SeatReservation entity.
// If the SeatReservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatReservationMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *SeatReservationMutation) ResetEndTime() {
	m.end_time = nil
}

// SetSeatID sets the "seat" edge to the Seat entity by id.
func (m *SeatReservationMutation) SetSeatID(id int64) {
	m.seat = &id
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (m *SeatReservationMutation) ClearSeat() {
	m.clearedseat = true
}

// SeatCleared reports if the "seat" edge to the Seat entity was cleared.
func (m *SeatReservationMutation) SeatCleared() bool {
	return m.clearedseat
}

// SeatID returns the "seat" edge ID in the mutation.
func (m *SeatReservationMutation) SeatID() (id int64, exists bool) {
	if m.seat != nil {
		return *m.seat, true
	}
	return
}

// SeatIDs returns the "seat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SeatID instead. It exists only for internal usage by the builders.
func (m *SeatReservationMutation) SeatIDs() (ids []int64) {
	if id := m.seat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSeat resets all changes to the "seat" edge.
func (m *SeatReservationMutation) ResetSeat() {
	m.seat = nil
	m.clearedseat = false
}

// SetScreeningID sets the "screening" edge to the Screening entity by id.
func (m *SeatReservationMutation) SetScreeningID(id int64) {
	m.screening = &id
}

// ClearScreening clears the "screening" edge to the Screening entity.
func (m *SeatReservationMutation) ClearScreening() {
	m.clearedscreening = true
}

// ScreeningCleared reports if the "screening" edge to the Screening entity was cleared.
func (m *SeatReservationMutation) ScreeningCleared() bool {
	return m.clearedscreening
}

// ScreeningID returns the "screening" edge ID in the mutation.
func (m *SeatReservationMutation) ScreeningID() (id int64, exists bool) {
	if m.screening != nil {
		return *m.screening, true
	}
	return
}

// ScreeningIDs returns the "screening" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScreeningID instead. It exists only for internal usage by the builders.
func (m *SeatReservationMutation) ScreeningIDs() (ids []int64) {
	if id := m.screening; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScreening resets all changes to the "screening" edge.
func (m *SeatReservationMutation) ResetScreening() {
	m.screening = nil
	m.clearedscreening = false
}

// Where appends a list predicates to the SeatReservationMutation builder.
func (m *SeatReservationMutation) Where(ps ...predicate.SeatReservation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SeatReservationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SeatReservationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SeatReservation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SeatReservationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SeatReservationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SeatReservation).
func (m *SeatReservationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SeatReservationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, seatreservation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, seatreservation.FieldUpdatedAt)
	}
	if m.reserved_at != nil {
		fields = append(fields, seatreservation.FieldReservedAt)
	}
	if m.group_id != nil {
		fields = append(fields, seatreservation.FieldGroupID)
	}
	if m.status != nil {
		fields = append(fields, seatreservation.FieldStatus)
	}
	if m.start_time != nil {
		fields = append(fields, seatreservation.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, seatreservation.FieldEndTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SeatReservationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case seatreservation.FieldCreatedAt:
		return m.CreatedAt()
	case seatreservation.FieldUpdatedAt:
		return m.UpdatedAt()
	case seatreservation.FieldReservedAt:
		return m.ReservedAt()
	case seatreservation.FieldGroupID:
		return m.GroupID()
	case seatreservation.FieldStatus:
		return m.Status()
	case seatreservation.FieldStartTime:
		return m.StartTime()
	case seatreservation.FieldEndTime:
		return m.EndTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SeatReservationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case seatreservation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case seatreservation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case seatreservation.FieldReservedAt:
		return m.OldReservedAt(ctx)
	case seatreservation.FieldGroupID:
		return m.OldGroupID(ctx)
	case seatreservation.FieldStatus:
		return m.OldStatus(ctx)
	case seatreservation.FieldStartTime:
		return m.OldStartTime(ctx)
	case seatreservation.FieldEndTime:
		return m.OldEndTime(ctx)
	}
	return nil, fmt.Errorf("unknown SeatReservation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatReservationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case seatreservation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case seatreservation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case seatreservation.FieldReservedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReservedAt(v)
		return nil
	case seatreservation.FieldGroupID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case seatreservation.FieldStatus:
		v, ok := value.(seatreservation.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case seatreservation.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case seatreservation.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	}
	return fmt.Errorf("unknown SeatReservation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SeatReservationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SeatReservationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatReservationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SeatReservation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SeatReservationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SeatReservationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SeatReservationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SeatReservation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SeatReservationMutation) ResetField(name string) error {
	switch name {
	case seatreservation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case seatreservation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case seatreservation.FieldReservedAt:
		m.ResetReservedAt()
		return nil
	case seatreservation.FieldGroupID:
		m.ResetGroupID()
		return nil
	case seatreservation.FieldStatus:
		m.ResetStatus()
		return nil
	case seatreservation.FieldStartTime:
		m.ResetStartTime()
		return nil
	case seatreservation.FieldEndTime:
		m.ResetEndTime()
		return nil
	}
	return fmt.Errorf("unknown SeatReservation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SeatReservationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.seat != nil {
		edges = append(edges, seatreservation.EdgeSeat)
	}
	if m.screening != nil {
		edges = append(edges, seatreservation.EdgeScreening)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SeatReservationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case seatreservation.EdgeSeat:
		if id := m.seat; id != nil {
			return []ent.Value{*id}
		}
	case seatreservation.EdgeScreening:
		if id := m.screening; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SeatReservationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SeatReservationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SeatReservationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedseat {
		edges = append(edges, seatreservation.EdgeSeat)
	}
	if m.clearedscreening {
		edges = append(edges, seatreservation.EdgeScreening)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SeatReservationMutation) EdgeCleared(name string) bool {
	switch name {
	case seatreservation.EdgeSeat:
		return m.clearedseat
	case seatreservation.EdgeScreening:
		return m.clearedscreening
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SeatReservationMutation) ClearEdge(name string) error {
	switch name {
	case seatreservation.EdgeSeat:
		m.ClearSeat()
		return nil
	case seatreservation.EdgeScreening:
		m.ClearScreening()
		return nil
	}
	return fmt.Errorf("unknown SeatReservation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SeatReservationMutation) ResetEdge(name string) error {
	switch name {
	case seatreservation.EdgeSeat:
		m.ResetSeat()
		return nil
	case seatreservation.EdgeScreening:
		m.ResetScreening()
		return nil
	}
	return fmt.Errorf("unknown SeatReservation edge %s", name)
}

// Code generated by ent, DO NOT EDIT.

package seatreservation

import (
	cinema "cinema/api"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seatreservation type in the database.
	Label = "seat_reservation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldReservedAt holds the string denoting the reserved_at field in the database.
	FieldReservedAt = "reserved_at"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRowNum holds the string denoting the row_num field in the database.
	FieldRowNum = "row_num"
	// FieldColumnNum holds the string denoting the column_num field in the database.
	FieldColumnNum = "column_num"
	// EdgeScreening holds the string denoting the screening edge name in mutations.
	EdgeScreening = "screening"
	// Table holds the table name of the seatreservation in the database.
	Table = "seat_reservations"
	// ScreeningTable is the table that holds the screening relation/edge.
	ScreeningTable = "seat_reservations"
	// ScreeningInverseTable is the table name for the Screening entity.
	// It exists in this package in order to avoid circular dependency with the "screening" package.
	ScreeningInverseTable = "screenings"
	// ScreeningColumn is the table column denoting the screening relation/edge.
	ScreeningColumn = "screening_seat_reservations"
)

// Columns holds all SQL columns for seatreservation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldReservedAt,
	FieldGroupID,
	FieldStatus,
	FieldRowNum,
	FieldColumnNum,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seat_reservations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"screening_seat_reservations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultReservedAt holds the default value on creation for the "reserved_at" field.
	DefaultReservedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus cinema.SeatReservationStatus
	// RowNumValidator is a validator for the "row_num" field. It is called by the builders before save.
	RowNumValidator func(uint32) error
	// ColumnNumValidator is a validator for the "column_num" field. It is called by the builders before save.
	ColumnNumValidator func(uint32) error
)

// OrderOption defines the ordering options for the SeatReservation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByReservedAt orders the results by the reserved_at field.
func ByReservedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservedAt, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRowNum orders the results by the row_num field.
func ByRowNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowNum, opts...).ToFunc()
}

// ByColumnNum orders the results by the column_num field.
func ByColumnNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColumnNum, opts...).ToFunc()
}

// ByScreeningField orders the results by screening field.
func ByScreeningField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScreeningStep(), sql.OrderByField(field, opts...))
	}
}
func newScreeningStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScreeningInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScreeningTable, ScreeningColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package seatreservation

import (
	"cinema/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReservedAt applies equality check predicate on the "reserved_at" field. It's identical to ReservedAtEQ.
func ReservedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldReservedAt, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldGroupID, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldEndTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReservedAtEQ applies the EQ predicate on the "reserved_at" field.
func ReservedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldReservedAt, v))
}

// ReservedAtNEQ applies the NEQ predicate on the "reserved_at" field.
func ReservedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldReservedAt, v))
}

// ReservedAtIn applies the In predicate on the "reserved_at" field.
func ReservedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldReservedAt, vs...))
}

// ReservedAtNotIn applies the NotIn predicate on the "reserved_at" field.
func ReservedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldReservedAt, vs...))
}

// ReservedAtGT applies the GT predicate on the "reserved_at" field.
func ReservedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldReservedAt, v))
}

// ReservedAtGTE applies the GTE predicate on the "reserved_at" field.
func ReservedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldReservedAt, v))
}

// ReservedAtLT applies the LT predicate on the "reserved_at" field.
func ReservedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldReservedAt, v))
}

// ReservedAtLTE applies the LTE predicate on the "reserved_at" field.
func ReservedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldReservedAt, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldGroupID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldStatus, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldEndTime, v))
}

// HasSeat applies the HasEdge predicate on the "seat" edge.
func HasSeat() predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeatTable, SeatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeatWith applies the HasEdge predicate on the "seat" edge with a given conditions (other predicates).
func HasSeatWith(preds ...predicate.Seat) predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := newSeatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScreening applies the HasEdge predicate on the "screening" edge.
func HasScreening() predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScreeningTable, ScreeningColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScreeningWith applies the HasEdge predicate on the "screening" edge with a given conditions (other predicates).
func HasScreeningWith(preds ...predicate.Screening) predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := newScreeningStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.NotPredicates(p))
}

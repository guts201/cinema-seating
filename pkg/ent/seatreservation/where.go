// Code generated by ent, DO NOT EDIT.

package seatreservation

import (
	cinema "cinema/api"
	"cinema/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReservedAt applies equality check predicate on the "reserved_at" field. It's identical to ReservedAtEQ.
func ReservedAt(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldReservedAt, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldGroupID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldEQ(FieldStatus, vc))
}

// RowNum applies equality check predicate on the "row_num" field. It's identical to RowNumEQ.
func RowNum(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldRowNum, v))
}

// ColumnNum applies equality check predicate on the "column_num" field. It's identical to ColumnNumEQ.
func ColumnNum(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldColumnNum, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReservedAtEQ applies the EQ predicate on the "reserved_at" field.
func ReservedAtEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldReservedAt, v))
}

// ReservedAtNEQ applies the NEQ predicate on the "reserved_at" field.
func ReservedAtNEQ(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldReservedAt, v))
}

// ReservedAtIn applies the In predicate on the "reserved_at" field.
func ReservedAtIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldReservedAt, vs...))
}

// ReservedAtNotIn applies the NotIn predicate on the "reserved_at" field.
func ReservedAtNotIn(vs ...time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldReservedAt, vs...))
}

// ReservedAtGT applies the GT predicate on the "reserved_at" field.
func ReservedAtGT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldReservedAt, v))
}

// ReservedAtGTE applies the GTE predicate on the "reserved_at" field.
func ReservedAtGTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldReservedAt, v))
}

// ReservedAtLT applies the LT predicate on the "reserved_at" field.
func ReservedAtLT(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldReservedAt, v))
}

// ReservedAtLTE applies the LTE predicate on the "reserved_at" field.
func ReservedAtLTE(v time.Time) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldReservedAt, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v uuid.UUID) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldGroupID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...cinema.SeatReservationStatus) predicate.SeatReservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.SeatReservation(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...cinema.SeatReservationStatus) predicate.SeatReservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.SeatReservation(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v cinema.SeatReservationStatus) predicate.SeatReservation {
	vc := int32(v)
	return predicate.SeatReservation(sql.FieldLTE(FieldStatus, vc))
}

// RowNumEQ applies the EQ predicate on the "row_num" field.
func RowNumEQ(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldRowNum, v))
}

// RowNumNEQ applies the NEQ predicate on the "row_num" field.
func RowNumNEQ(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldRowNum, v))
}

// RowNumIn applies the In predicate on the "row_num" field.
func RowNumIn(vs ...uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldRowNum, vs...))
}

// RowNumNotIn applies the NotIn predicate on the "row_num" field.
func RowNumNotIn(vs ...uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldRowNum, vs...))
}

// RowNumGT applies the GT predicate on the "row_num" field.
func RowNumGT(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldRowNum, v))
}

// RowNumGTE applies the GTE predicate on the "row_num" field.
func RowNumGTE(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldRowNum, v))
}

// RowNumLT applies the LT predicate on the "row_num" field.
func RowNumLT(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldRowNum, v))
}

// RowNumLTE applies the LTE predicate on the "row_num" field.
func RowNumLTE(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldRowNum, v))
}

// ColumnNumEQ applies the EQ predicate on the "column_num" field.
func ColumnNumEQ(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldEQ(FieldColumnNum, v))
}

// ColumnNumNEQ applies the NEQ predicate on the "column_num" field.
func ColumnNumNEQ(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNEQ(FieldColumnNum, v))
}

// ColumnNumIn applies the In predicate on the "column_num" field.
func ColumnNumIn(vs ...uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldIn(FieldColumnNum, vs...))
}

// ColumnNumNotIn applies the NotIn predicate on the "column_num" field.
func ColumnNumNotIn(vs ...uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldNotIn(FieldColumnNum, vs...))
}

// ColumnNumGT applies the GT predicate on the "column_num" field.
func ColumnNumGT(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGT(FieldColumnNum, v))
}

// ColumnNumGTE applies the GTE predicate on the "column_num" field.
func ColumnNumGTE(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldGTE(FieldColumnNum, v))
}

// ColumnNumLT applies the LT predicate on the "column_num" field.
func ColumnNumLT(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLT(FieldColumnNum, v))
}

// ColumnNumLTE applies the LTE predicate on the "column_num" field.
func ColumnNumLTE(v uint32) predicate.SeatReservation {
	return predicate.SeatReservation(sql.FieldLTE(FieldColumnNum, v))
}

// HasScreening applies the HasEdge predicate on the "screening" edge.
func HasScreening() predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScreeningTable, ScreeningColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScreeningWith applies the HasEdge predicate on the "screening" edge with a given conditions (other predicates).
func HasScreeningWith(preds ...predicate.Screening) predicate.SeatReservation {
	return predicate.SeatReservation(func(s *sql.Selector) {
		step := newScreeningStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeatReservation) predicate.SeatReservation {
	return predicate.SeatReservation(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	entcinema "cinema/pkg/ent/cinema"
	"cinema/pkg/ent/movie"
	"cinema/pkg/ent/screening"
	"cinema/pkg/ent/seatreservation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScreeningCreate is the builder for creating a Screening entity.
type ScreeningCreate struct {
	config
	mutation *ScreeningMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScreeningCreate) SetCreatedAt(t time.Time) *ScreeningCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScreeningCreate) SetNillableCreatedAt(t *time.Time) *ScreeningCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScreeningCreate) SetUpdatedAt(t time.Time) *ScreeningCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScreeningCreate) SetNillableUpdatedAt(t *time.Time) *ScreeningCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *ScreeningCreate) SetTitle(s string) *ScreeningCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetStartTime sets the "start_time" field.
func (sc *ScreeningCreate) SetStartTime(t time.Time) *ScreeningCreate {
	sc.mutation.SetStartTime(t)
	return sc
}

// SetID sets the "id" field.
func (sc *ScreeningCreate) SetID(i int64) *ScreeningCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (sc *ScreeningCreate) SetMovieID(id int64) *ScreeningCreate {
	sc.mutation.SetMovieID(id)
	return sc
}

// SetNillableMovieID sets the "movie" edge to the Movie entity by ID if the given value is not nil.
func (sc *ScreeningCreate) SetNillableMovieID(id *int64) *ScreeningCreate {
	if id != nil {
		sc = sc.SetMovieID(*id)
	}
	return sc
}

// SetMovie sets the "movie" edge to the Movie entity.
func (sc *ScreeningCreate) SetMovie(m *Movie) *ScreeningCreate {
	return sc.SetMovieID(m.ID)
}

// SetCinemaID sets the "cinema" edge to the Cinema entity by ID.
func (sc *ScreeningCreate) SetCinemaID(id int64) *ScreeningCreate {
	sc.mutation.SetCinemaID(id)
	return sc
}

// SetNillableCinemaID sets the "cinema" edge to the Cinema entity by ID if the given value is not nil.
func (sc *ScreeningCreate) SetNillableCinemaID(id *int64) *ScreeningCreate {
	if id != nil {
		sc = sc.SetCinemaID(*id)
	}
	return sc
}

// SetCinema sets the "cinema" edge to the Cinema entity.
func (sc *ScreeningCreate) SetCinema(c *Cinema) *ScreeningCreate {
	return sc.SetCinemaID(c.ID)
}

// AddSeatReservationIDs adds the "seat_reservations" edge to the SeatReservation entity by IDs.
func (sc *ScreeningCreate) AddSeatReservationIDs(ids ...int64) *ScreeningCreate {
	sc.mutation.AddSeatReservationIDs(ids...)
	return sc
}

// AddSeatReservations adds the "seat_reservations" edges to the SeatReservation entity.
func (sc *ScreeningCreate) AddSeatReservations(s ...*SeatReservation) *ScreeningCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSeatReservationIDs(ids...)
}

// Mutation returns the ScreeningMutation object of the builder.
func (sc *ScreeningCreate) Mutation() *ScreeningMutation {
	return sc.mutation
}

// Save creates the Screening in the database.
func (sc *ScreeningCreate) Save(ctx context.Context) (*Screening, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScreeningCreate) SaveX(ctx context.Context) *Screening {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScreeningCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScreeningCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScreeningCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := screening.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := screening.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScreeningCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Screening.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Screening.updated_at"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Screening.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := screening.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Screening.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Screening.start_time"`)}
	}
	return nil
}

func (sc *ScreeningCreate) sqlSave(ctx context.Context) (*Screening, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScreeningCreate) createSpec() (*Screening, *sqlgraph.CreateSpec) {
	var (
		_node = &Screening{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(screening.Table, sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(screening.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(screening.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(screening.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.StartTime(); ok {
		_spec.SetField(screening.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if nodes := sc.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screening.MovieTable,
			Columns: []string{screening.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.movie_screenings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CinemaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   screening.CinemaTable,
			Columns: []string{screening.CinemaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcinema.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cinema_screenings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SeatReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   screening.SeatReservationsTable,
			Columns: []string{screening.SeatReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatreservation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Screening.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *ScreeningCreate) OnConflict(opts ...sql.ConflictOption) *ScreeningUpsertOne {
	sc.conflict = opts
	return &ScreeningUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Screening.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScreeningCreate) OnConflictColumns(columns ...string) *ScreeningUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScreeningUpsertOne{
		create: sc,
	}
}

type (
	// ScreeningUpsertOne is the builder for "upsert"-ing
	//  one Screening node.
	ScreeningUpsertOne struct {
		create *ScreeningCreate
	}

	// ScreeningUpsert is the "OnConflict" setter.
	ScreeningUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningUpsert) SetUpdatedAt(v time.Time) *ScreeningUpsert {
	u.Set(screening.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningUpsert) UpdateUpdatedAt() *ScreeningUpsert {
	u.SetExcluded(screening.FieldUpdatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *ScreeningUpsert) SetTitle(v string) *ScreeningUpsert {
	u.Set(screening.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ScreeningUpsert) UpdateTitle() *ScreeningUpsert {
	u.SetExcluded(screening.FieldTitle)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *ScreeningUpsert) SetStartTime(v time.Time) *ScreeningUpsert {
	u.Set(screening.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScreeningUpsert) UpdateStartTime() *ScreeningUpsert {
	u.SetExcluded(screening.FieldStartTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Screening.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screening.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningUpsertOne) UpdateNewValues() *ScreeningUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(screening.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(screening.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Screening.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScreeningUpsertOne) Ignore() *ScreeningUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningUpsertOne) DoNothing() *ScreeningUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningCreate.OnConflict
// documentation for more info.
func (u *ScreeningUpsertOne) Update(set func(*ScreeningUpsert)) *ScreeningUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningUpsertOne) SetUpdatedAt(v time.Time) *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningUpsertOne) UpdateUpdatedAt() *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *ScreeningUpsertOne) SetTitle(v string) *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ScreeningUpsertOne) UpdateTitle() *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateTitle()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ScreeningUpsertOne) SetStartTime(v time.Time) *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScreeningUpsertOne) UpdateStartTime() *ScreeningUpsertOne {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateStartTime()
	})
}

// Exec executes the query.
func (u *ScreeningUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScreeningCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScreeningUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScreeningUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScreeningCreateBulk is the builder for creating many Screening entities in bulk.
type ScreeningCreateBulk struct {
	config
	err      error
	builders []*ScreeningCreate
	conflict []sql.ConflictOption
}

// Save creates the Screening entities in the database.
func (scb *ScreeningCreateBulk) Save(ctx context.Context) ([]*Screening, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Screening, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScreeningMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScreeningCreateBulk) SaveX(ctx context.Context) []*Screening {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScreeningCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScreeningCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Screening.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScreeningUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *ScreeningCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScreeningUpsertBulk {
	scb.conflict = opts
	return &ScreeningUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Screening.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScreeningCreateBulk) OnConflictColumns(columns ...string) *ScreeningUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScreeningUpsertBulk{
		create: scb,
	}
}

// ScreeningUpsertBulk is the builder for "upsert"-ing
// a bulk of Screening nodes.
type ScreeningUpsertBulk struct {
	create *ScreeningCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Screening.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(screening.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScreeningUpsertBulk) UpdateNewValues() *ScreeningUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(screening.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(screening.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Screening.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScreeningUpsertBulk) Ignore() *ScreeningUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScreeningUpsertBulk) DoNothing() *ScreeningUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScreeningCreateBulk.OnConflict
// documentation for more info.
func (u *ScreeningUpsertBulk) Update(set func(*ScreeningUpsert)) *ScreeningUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScreeningUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScreeningUpsertBulk) SetUpdatedAt(v time.Time) *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScreeningUpsertBulk) UpdateUpdatedAt() *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *ScreeningUpsertBulk) SetTitle(v string) *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ScreeningUpsertBulk) UpdateTitle() *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateTitle()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ScreeningUpsertBulk) SetStartTime(v time.Time) *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ScreeningUpsertBulk) UpdateStartTime() *ScreeningUpsertBulk {
	return u.Update(func(s *ScreeningUpsert) {
		s.UpdateStartTime()
	})
}

// Exec executes the query.
func (u *ScreeningUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScreeningCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScreeningCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScreeningUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

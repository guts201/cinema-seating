// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/predicate"
	"cinema/pkg/ent/screening"
	"cinema/pkg/ent/seat"
	"cinema/pkg/ent/seatreservation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SeatReservationUpdate is the builder for updating SeatReservation entities.
type SeatReservationUpdate struct {
	config
	hooks     []Hook
	mutation  *SeatReservationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SeatReservationUpdate builder.
func (sru *SeatReservationUpdate) Where(ps ...predicate.SeatReservation) *SeatReservationUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SeatReservationUpdate) SetUpdatedAt(t time.Time) *SeatReservationUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetReservedAt sets the "reserved_at" field.
func (sru *SeatReservationUpdate) SetReservedAt(t time.Time) *SeatReservationUpdate {
	sru.mutation.SetReservedAt(t)
	return sru
}

// SetNillableReservedAt sets the "reserved_at" field if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableReservedAt(t *time.Time) *SeatReservationUpdate {
	if t != nil {
		sru.SetReservedAt(*t)
	}
	return sru
}

// SetGroupID sets the "group_id" field.
func (sru *SeatReservationUpdate) SetGroupID(u uuid.UUID) *SeatReservationUpdate {
	sru.mutation.SetGroupID(u)
	return sru
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableGroupID(u *uuid.UUID) *SeatReservationUpdate {
	if u != nil {
		sru.SetGroupID(*u)
	}
	return sru
}

// SetStatus sets the "status" field.
func (sru *SeatReservationUpdate) SetStatus(s seatreservation.Status) *SeatReservationUpdate {
	sru.mutation.SetStatus(s)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableStatus(s *seatreservation.Status) *SeatReservationUpdate {
	if s != nil {
		sru.SetStatus(*s)
	}
	return sru
}

// SetStartTime sets the "start_time" field.
func (sru *SeatReservationUpdate) SetStartTime(t time.Time) *SeatReservationUpdate {
	sru.mutation.SetStartTime(t)
	return sru
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableStartTime(t *time.Time) *SeatReservationUpdate {
	if t != nil {
		sru.SetStartTime(*t)
	}
	return sru
}

// SetEndTime sets the "end_time" field.
func (sru *SeatReservationUpdate) SetEndTime(t time.Time) *SeatReservationUpdate {
	sru.mutation.SetEndTime(t)
	return sru
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableEndTime(t *time.Time) *SeatReservationUpdate {
	if t != nil {
		sru.SetEndTime(*t)
	}
	return sru
}

// SetSeatID sets the "seat" edge to the Seat entity by ID.
func (sru *SeatReservationUpdate) SetSeatID(id int64) *SeatReservationUpdate {
	sru.mutation.SetSeatID(id)
	return sru
}

// SetNillableSeatID sets the "seat" edge to the Seat entity by ID if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableSeatID(id *int64) *SeatReservationUpdate {
	if id != nil {
		sru = sru.SetSeatID(*id)
	}
	return sru
}

// SetSeat sets the "seat" edge to the Seat entity.
func (sru *SeatReservationUpdate) SetSeat(s *Seat) *SeatReservationUpdate {
	return sru.SetSeatID(s.ID)
}

// SetScreeningID sets the "screening" edge to the Screening entity by ID.
func (sru *SeatReservationUpdate) SetScreeningID(id int64) *SeatReservationUpdate {
	sru.mutation.SetScreeningID(id)
	return sru
}

// SetNillableScreeningID sets the "screening" edge to the Screening entity by ID if the given value is not nil.
func (sru *SeatReservationUpdate) SetNillableScreeningID(id *int64) *SeatReservationUpdate {
	if id != nil {
		sru = sru.SetScreeningID(*id)
	}
	return sru
}

// SetScreening sets the "screening" edge to the Screening entity.
func (sru *SeatReservationUpdate) SetScreening(s *Screening) *SeatReservationUpdate {
	return sru.SetScreeningID(s.ID)
}

// Mutation returns the SeatReservationMutation object of the builder.
func (sru *SeatReservationUpdate) Mutation() *SeatReservationMutation {
	return sru.mutation
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (sru *SeatReservationUpdate) ClearSeat() *SeatReservationUpdate {
	sru.mutation.ClearSeat()
	return sru
}

// ClearScreening clears the "screening" edge to the Screening entity.
func (sru *SeatReservationUpdate) ClearScreening() *SeatReservationUpdate {
	sru.mutation.ClearScreening()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SeatReservationUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SeatReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SeatReservationUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SeatReservationUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SeatReservationUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := seatreservation.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SeatReservationUpdate) check() error {
	if v, ok := sru.mutation.Status(); ok {
		if err := seatreservation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SeatReservation.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *SeatReservationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeatReservationUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *SeatReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatreservation.Table, seatreservation.Columns, sqlgraph.NewFieldSpec(seatreservation.FieldID, field.TypeInt64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(seatreservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.ReservedAt(); ok {
		_spec.SetField(seatreservation.FieldReservedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.GroupID(); ok {
		_spec.SetField(seatreservation.FieldGroupID, field.TypeUUID, value)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(seatreservation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sru.mutation.StartTime(); ok {
		_spec.SetField(seatreservation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := sru.mutation.EndTime(); ok {
		_spec.SetField(seatreservation.FieldEndTime, field.TypeTime, value)
	}
	if sru.mutation.SeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.SeatTable,
			Columns: []string{seatreservation.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.SeatTable,
			Columns: []string{seatreservation.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ScreeningCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.ScreeningTable,
			Columns: []string{seatreservation.ScreeningColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ScreeningIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.ScreeningTable,
			Columns: []string{seatreservation.ScreeningColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SeatReservationUpdateOne is the builder for updating a single SeatReservation entity.
type SeatReservationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SeatReservationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SeatReservationUpdateOne) SetUpdatedAt(t time.Time) *SeatReservationUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetReservedAt sets the "reserved_at" field.
func (sruo *SeatReservationUpdateOne) SetReservedAt(t time.Time) *SeatReservationUpdateOne {
	sruo.mutation.SetReservedAt(t)
	return sruo
}

// SetNillableReservedAt sets the "reserved_at" field if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableReservedAt(t *time.Time) *SeatReservationUpdateOne {
	if t != nil {
		sruo.SetReservedAt(*t)
	}
	return sruo
}

// SetGroupID sets the "group_id" field.
func (sruo *SeatReservationUpdateOne) SetGroupID(u uuid.UUID) *SeatReservationUpdateOne {
	sruo.mutation.SetGroupID(u)
	return sruo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableGroupID(u *uuid.UUID) *SeatReservationUpdateOne {
	if u != nil {
		sruo.SetGroupID(*u)
	}
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *SeatReservationUpdateOne) SetStatus(s seatreservation.Status) *SeatReservationUpdateOne {
	sruo.mutation.SetStatus(s)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableStatus(s *seatreservation.Status) *SeatReservationUpdateOne {
	if s != nil {
		sruo.SetStatus(*s)
	}
	return sruo
}

// SetStartTime sets the "start_time" field.
func (sruo *SeatReservationUpdateOne) SetStartTime(t time.Time) *SeatReservationUpdateOne {
	sruo.mutation.SetStartTime(t)
	return sruo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableStartTime(t *time.Time) *SeatReservationUpdateOne {
	if t != nil {
		sruo.SetStartTime(*t)
	}
	return sruo
}

// SetEndTime sets the "end_time" field.
func (sruo *SeatReservationUpdateOne) SetEndTime(t time.Time) *SeatReservationUpdateOne {
	sruo.mutation.SetEndTime(t)
	return sruo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableEndTime(t *time.Time) *SeatReservationUpdateOne {
	if t != nil {
		sruo.SetEndTime(*t)
	}
	return sruo
}

// SetSeatID sets the "seat" edge to the Seat entity by ID.
func (sruo *SeatReservationUpdateOne) SetSeatID(id int64) *SeatReservationUpdateOne {
	sruo.mutation.SetSeatID(id)
	return sruo
}

// SetNillableSeatID sets the "seat" edge to the Seat entity by ID if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableSeatID(id *int64) *SeatReservationUpdateOne {
	if id != nil {
		sruo = sruo.SetSeatID(*id)
	}
	return sruo
}

// SetSeat sets the "seat" edge to the Seat entity.
func (sruo *SeatReservationUpdateOne) SetSeat(s *Seat) *SeatReservationUpdateOne {
	return sruo.SetSeatID(s.ID)
}

// SetScreeningID sets the "screening" edge to the Screening entity by ID.
func (sruo *SeatReservationUpdateOne) SetScreeningID(id int64) *SeatReservationUpdateOne {
	sruo.mutation.SetScreeningID(id)
	return sruo
}

// SetNillableScreeningID sets the "screening" edge to the Screening entity by ID if the given value is not nil.
func (sruo *SeatReservationUpdateOne) SetNillableScreeningID(id *int64) *SeatReservationUpdateOne {
	if id != nil {
		sruo = sruo.SetScreeningID(*id)
	}
	return sruo
}

// SetScreening sets the "screening" edge to the Screening entity.
func (sruo *SeatReservationUpdateOne) SetScreening(s *Screening) *SeatReservationUpdateOne {
	return sruo.SetScreeningID(s.ID)
}

// Mutation returns the SeatReservationMutation object of the builder.
func (sruo *SeatReservationUpdateOne) Mutation() *SeatReservationMutation {
	return sruo.mutation
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (sruo *SeatReservationUpdateOne) ClearSeat() *SeatReservationUpdateOne {
	sruo.mutation.ClearSeat()
	return sruo
}

// ClearScreening clears the "screening" edge to the Screening entity.
func (sruo *SeatReservationUpdateOne) ClearScreening() *SeatReservationUpdateOne {
	sruo.mutation.ClearScreening()
	return sruo
}

// Where appends a list predicates to the SeatReservationUpdate builder.
func (sruo *SeatReservationUpdateOne) Where(ps ...predicate.SeatReservation) *SeatReservationUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SeatReservationUpdateOne) Select(field string, fields ...string) *SeatReservationUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SeatReservation entity.
func (sruo *SeatReservationUpdateOne) Save(ctx context.Context) (*SeatReservation, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SeatReservationUpdateOne) SaveX(ctx context.Context) *SeatReservation {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SeatReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SeatReservationUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SeatReservationUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := seatreservation.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SeatReservationUpdateOne) check() error {
	if v, ok := sruo.mutation.Status(); ok {
		if err := seatreservation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SeatReservation.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *SeatReservationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeatReservationUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *SeatReservationUpdateOne) sqlSave(ctx context.Context) (_node *SeatReservation, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatreservation.Table, seatreservation.Columns, sqlgraph.NewFieldSpec(seatreservation.FieldID, field.TypeInt64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeatReservation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seatreservation.FieldID)
		for _, f := range fields {
			if !seatreservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seatreservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(seatreservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.ReservedAt(); ok {
		_spec.SetField(seatreservation.FieldReservedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.GroupID(); ok {
		_spec.SetField(seatreservation.FieldGroupID, field.TypeUUID, value)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(seatreservation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sruo.mutation.StartTime(); ok {
		_spec.SetField(seatreservation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.EndTime(); ok {
		_spec.SetField(seatreservation.FieldEndTime, field.TypeTime, value)
	}
	if sruo.mutation.SeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.SeatTable,
			Columns: []string{seatreservation.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.SeatTable,
			Columns: []string{seatreservation.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ScreeningCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.ScreeningTable,
			Columns: []string{seatreservation.ScreeningColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ScreeningIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seatreservation.ScreeningTable,
			Columns: []string{seatreservation.ScreeningColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &SeatReservation{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}

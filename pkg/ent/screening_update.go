// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/predicate"
	"cinema/pkg/ent/screening"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScreeningUpdate is the builder for updating Screening entities.
type ScreeningUpdate struct {
	config
	hooks     []Hook
	mutation  *ScreeningMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScreeningUpdate builder.
func (su *ScreeningUpdate) Where(ps ...predicate.Screening) *ScreeningUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScreeningUpdate) SetUpdatedAt(t time.Time) *ScreeningUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetTitle sets the "title" field.
func (su *ScreeningUpdate) SetTitle(s string) *ScreeningUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *ScreeningUpdate) SetNillableTitle(s *string) *ScreeningUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetStartTime sets the "start_time" field.
func (su *ScreeningUpdate) SetStartTime(t time.Time) *ScreeningUpdate {
	su.mutation.SetStartTime(t)
	return su
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (su *ScreeningUpdate) SetNillableStartTime(t *time.Time) *ScreeningUpdate {
	if t != nil {
		su.SetStartTime(*t)
	}
	return su
}

// SetMinDistance sets the "min_distance" field.
func (su *ScreeningUpdate) SetMinDistance(i int32) *ScreeningUpdate {
	su.mutation.ResetMinDistance()
	su.mutation.SetMinDistance(i)
	return su
}

// SetNillableMinDistance sets the "min_distance" field if the given value is not nil.
func (su *ScreeningUpdate) SetNillableMinDistance(i *int32) *ScreeningUpdate {
	if i != nil {
		su.SetMinDistance(*i)
	}
	return su
}

// AddMinDistance adds i to the "min_distance" field.
func (su *ScreeningUpdate) AddMinDistance(i int32) *ScreeningUpdate {
	su.mutation.AddMinDistance(i)
	return su
}

// Mutation returns the ScreeningMutation object of the builder.
func (su *ScreeningUpdate) Mutation() *ScreeningMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScreeningUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScreeningUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScreeningUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScreeningUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScreeningUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := screening.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScreeningUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := screening.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Screening.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.MinDistance(); ok {
		if err := screening.MinDistanceValidator(v); err != nil {
			return &ValidationError{Name: "min_distance", err: fmt.Errorf(`ent: validator failed for field "Screening.min_distance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ScreeningUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ScreeningUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(screening.Table, screening.Columns, sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(screening.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(screening.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.SetField(screening.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.MinDistance(); ok {
		_spec.SetField(screening.FieldMinDistance, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedMinDistance(); ok {
		_spec.AddField(screening.FieldMinDistance, field.TypeInt32, value)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screening.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScreeningUpdateOne is the builder for updating a single Screening entity.
type ScreeningUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScreeningMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScreeningUpdateOne) SetUpdatedAt(t time.Time) *ScreeningUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetTitle sets the "title" field.
func (suo *ScreeningUpdateOne) SetTitle(s string) *ScreeningUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *ScreeningUpdateOne) SetNillableTitle(s *string) *ScreeningUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetStartTime sets the "start_time" field.
func (suo *ScreeningUpdateOne) SetStartTime(t time.Time) *ScreeningUpdateOne {
	suo.mutation.SetStartTime(t)
	return suo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (suo *ScreeningUpdateOne) SetNillableStartTime(t *time.Time) *ScreeningUpdateOne {
	if t != nil {
		suo.SetStartTime(*t)
	}
	return suo
}

// SetMinDistance sets the "min_distance" field.
func (suo *ScreeningUpdateOne) SetMinDistance(i int32) *ScreeningUpdateOne {
	suo.mutation.ResetMinDistance()
	suo.mutation.SetMinDistance(i)
	return suo
}

// SetNillableMinDistance sets the "min_distance" field if the given value is not nil.
func (suo *ScreeningUpdateOne) SetNillableMinDistance(i *int32) *ScreeningUpdateOne {
	if i != nil {
		suo.SetMinDistance(*i)
	}
	return suo
}

// AddMinDistance adds i to the "min_distance" field.
func (suo *ScreeningUpdateOne) AddMinDistance(i int32) *ScreeningUpdateOne {
	suo.mutation.AddMinDistance(i)
	return suo
}

// Mutation returns the ScreeningMutation object of the builder.
func (suo *ScreeningUpdateOne) Mutation() *ScreeningMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScreeningUpdate builder.
func (suo *ScreeningUpdateOne) Where(ps ...predicate.Screening) *ScreeningUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScreeningUpdateOne) Select(field string, fields ...string) *ScreeningUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Screening entity.
func (suo *ScreeningUpdateOne) Save(ctx context.Context) (*Screening, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScreeningUpdateOne) SaveX(ctx context.Context) *Screening {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScreeningUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScreeningUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScreeningUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := screening.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScreeningUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := screening.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Screening.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.MinDistance(); ok {
		if err := screening.MinDistanceValidator(v); err != nil {
			return &ValidationError{Name: "min_distance", err: fmt.Errorf(`ent: validator failed for field "Screening.min_distance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ScreeningUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScreeningUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ScreeningUpdateOne) sqlSave(ctx context.Context) (_node *Screening, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(screening.Table, screening.Columns, sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Screening.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, screening.FieldID)
		for _, f := range fields {
			if !screening.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != screening.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(screening.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(screening.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.SetField(screening.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.MinDistance(); ok {
		_spec.SetField(screening.FieldMinDistance, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedMinDistance(); ok {
		_spec.AddField(screening.FieldMinDistance, field.TypeInt32, value)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Screening{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{screening.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

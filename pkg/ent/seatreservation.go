// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/seatreservation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SeatReservation is the model entity for the SeatReservation schema.
type SeatReservation struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReservedAt holds the value of the "reserved_at" field.
	ReservedAt time.Time `json:"reserved_at,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID uuid.UUID `json:"group_id,omitempty"`
	// Status holds the value of the "status" field.
	Status seatreservation.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime      time.Time `json:"end_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeatReservation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seatreservation.FieldID:
			values[i] = new(sql.NullInt64)
		case seatreservation.FieldStatus:
			values[i] = new(sql.NullString)
		case seatreservation.FieldCreatedAt, seatreservation.FieldUpdatedAt, seatreservation.FieldReservedAt, seatreservation.FieldStartTime, seatreservation.FieldEndTime:
			values[i] = new(sql.NullTime)
		case seatreservation.FieldGroupID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeatReservation fields.
func (sr *SeatReservation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seatreservation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case seatreservation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case seatreservation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case seatreservation.FieldReservedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reserved_at", values[i])
			} else if value.Valid {
				sr.ReservedAt = value.Time
			}
		case seatreservation.FieldGroupID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value != nil {
				sr.GroupID = *value
			}
		case seatreservation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = seatreservation.Status(value.String)
			}
		case seatreservation.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				sr.StartTime = value.Time
			}
		case seatreservation.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				sr.EndTime = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeatReservation.
// This includes values selected through modifiers, order, etc.
func (sr *SeatReservation) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this SeatReservation.
// Note that you need to call SeatReservation.Unwrap() before calling this method if this SeatReservation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SeatReservation) Update() *SeatReservationUpdateOne {
	return NewSeatReservationClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SeatReservation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SeatReservation) Unwrap() *SeatReservation {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeatReservation is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SeatReservation) String() string {
	var builder strings.Builder
	builder.WriteString("SeatReservation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reserved_at=")
	builder.WriteString(sr.ReservedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.GroupID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(sr.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(sr.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SeatReservations is a parsable slice of SeatReservation.
type SeatReservations []*SeatReservation

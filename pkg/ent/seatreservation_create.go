// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/seatreservation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SeatReservationCreate is the builder for creating a SeatReservation entity.
type SeatReservationCreate struct {
	config
	mutation *SeatReservationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (src *SeatReservationCreate) SetCreatedAt(t time.Time) *SeatReservationCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableCreatedAt(t *time.Time) *SeatReservationCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SeatReservationCreate) SetUpdatedAt(t time.Time) *SeatReservationCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableUpdatedAt(t *time.Time) *SeatReservationCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetReservedAt sets the "reserved_at" field.
func (src *SeatReservationCreate) SetReservedAt(t time.Time) *SeatReservationCreate {
	src.mutation.SetReservedAt(t)
	return src
}

// SetNillableReservedAt sets the "reserved_at" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableReservedAt(t *time.Time) *SeatReservationCreate {
	if t != nil {
		src.SetReservedAt(*t)
	}
	return src
}

// SetGroupID sets the "group_id" field.
func (src *SeatReservationCreate) SetGroupID(u uuid.UUID) *SeatReservationCreate {
	src.mutation.SetGroupID(u)
	return src
}

// SetStatus sets the "status" field.
func (src *SeatReservationCreate) SetStatus(s seatreservation.Status) *SeatReservationCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableStatus(s *seatreservation.Status) *SeatReservationCreate {
	if s != nil {
		src.SetStatus(*s)
	}
	return src
}

// SetStartTime sets the "start_time" field.
func (src *SeatReservationCreate) SetStartTime(t time.Time) *SeatReservationCreate {
	src.mutation.SetStartTime(t)
	return src
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableStartTime(t *time.Time) *SeatReservationCreate {
	if t != nil {
		src.SetStartTime(*t)
	}
	return src
}

// SetEndTime sets the "end_time" field.
func (src *SeatReservationCreate) SetEndTime(t time.Time) *SeatReservationCreate {
	src.mutation.SetEndTime(t)
	return src
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (src *SeatReservationCreate) SetNillableEndTime(t *time.Time) *SeatReservationCreate {
	if t != nil {
		src.SetEndTime(*t)
	}
	return src
}

// SetID sets the "id" field.
func (src *SeatReservationCreate) SetID(i int64) *SeatReservationCreate {
	src.mutation.SetID(i)
	return src
}

// Mutation returns the SeatReservationMutation object of the builder.
func (src *SeatReservationCreate) Mutation() *SeatReservationMutation {
	return src.mutation
}

// Save creates the SeatReservation in the database.
func (src *SeatReservationCreate) Save(ctx context.Context) (*SeatReservation, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SeatReservationCreate) SaveX(ctx context.Context) *SeatReservation {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SeatReservationCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SeatReservationCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SeatReservationCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := seatreservation.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := seatreservation.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.ReservedAt(); !ok {
		v := seatreservation.DefaultReservedAt()
		src.mutation.SetReservedAt(v)
	}
	if _, ok := src.mutation.Status(); !ok {
		v := seatreservation.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.StartTime(); !ok {
		v := seatreservation.DefaultStartTime()
		src.mutation.SetStartTime(v)
	}
	if _, ok := src.mutation.EndTime(); !ok {
		v := seatreservation.DefaultEndTime
		src.mutation.SetEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SeatReservationCreate) check() error {
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SeatReservation.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SeatReservation.updated_at"`)}
	}
	if _, ok := src.mutation.ReservedAt(); !ok {
		return &ValidationError{Name: "reserved_at", err: errors.New(`ent: missing required field "SeatReservation.reserved_at"`)}
	}
	if _, ok := src.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "SeatReservation.group_id"`)}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SeatReservation.status"`)}
	}
	if v, ok := src.mutation.Status(); ok {
		if err := seatreservation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SeatReservation.status": %w`, err)}
		}
	}
	if _, ok := src.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "SeatReservation.start_time"`)}
	}
	if _, ok := src.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "SeatReservation.end_time"`)}
	}
	return nil
}

func (src *SeatReservationCreate) sqlSave(ctx context.Context) (*SeatReservation, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SeatReservationCreate) createSpec() (*SeatReservation, *sqlgraph.CreateSpec) {
	var (
		_node = &SeatReservation{config: src.config}
		_spec = sqlgraph.NewCreateSpec(seatreservation.Table, sqlgraph.NewFieldSpec(seatreservation.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(seatreservation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(seatreservation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.ReservedAt(); ok {
		_spec.SetField(seatreservation.FieldReservedAt, field.TypeTime, value)
		_node.ReservedAt = value
	}
	if value, ok := src.mutation.GroupID(); ok {
		_spec.SetField(seatreservation.FieldGroupID, field.TypeUUID, value)
		_node.GroupID = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(seatreservation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := src.mutation.StartTime(); ok {
		_spec.SetField(seatreservation.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := src.mutation.EndTime(); ok {
		_spec.SetField(seatreservation.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatReservation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatReservationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (src *SeatReservationCreate) OnConflict(opts ...sql.ConflictOption) *SeatReservationUpsertOne {
	src.conflict = opts
	return &SeatReservationUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *SeatReservationCreate) OnConflictColumns(columns ...string) *SeatReservationUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &SeatReservationUpsertOne{
		create: src,
	}
}

type (
	// SeatReservationUpsertOne is the builder for "upsert"-ing
	//  one SeatReservation node.
	SeatReservationUpsertOne struct {
		create *SeatReservationCreate
	}

	// SeatReservationUpsert is the "OnConflict" setter.
	SeatReservationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SeatReservationUpsert) SetUpdatedAt(v time.Time) *SeatReservationUpsert {
	u.Set(seatreservation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateUpdatedAt() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldUpdatedAt)
	return u
}

// SetReservedAt sets the "reserved_at" field.
func (u *SeatReservationUpsert) SetReservedAt(v time.Time) *SeatReservationUpsert {
	u.Set(seatreservation.FieldReservedAt, v)
	return u
}

// UpdateReservedAt sets the "reserved_at" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateReservedAt() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldReservedAt)
	return u
}

// SetGroupID sets the "group_id" field.
func (u *SeatReservationUpsert) SetGroupID(v uuid.UUID) *SeatReservationUpsert {
	u.Set(seatreservation.FieldGroupID, v)
	return u
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateGroupID() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldGroupID)
	return u
}

// SetStatus sets the "status" field.
func (u *SeatReservationUpsert) SetStatus(v seatreservation.Status) *SeatReservationUpsert {
	u.Set(seatreservation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateStatus() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldStatus)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *SeatReservationUpsert) SetStartTime(v time.Time) *SeatReservationUpsert {
	u.Set(seatreservation.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateStartTime() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *SeatReservationUpsert) SetEndTime(v time.Time) *SeatReservationUpsert {
	u.Set(seatreservation.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *SeatReservationUpsert) UpdateEndTime() *SeatReservationUpsert {
	u.SetExcluded(seatreservation.FieldEndTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatreservation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatReservationUpsertOne) UpdateNewValues() *SeatReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(seatreservation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(seatreservation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SeatReservationUpsertOne) Ignore() *SeatReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatReservationUpsertOne) DoNothing() *SeatReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatReservationCreate.OnConflict
// documentation for more info.
func (u *SeatReservationUpsertOne) Update(set func(*SeatReservationUpsert)) *SeatReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatReservationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SeatReservationUpsertOne) SetUpdatedAt(v time.Time) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateUpdatedAt() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetReservedAt sets the "reserved_at" field.
func (u *SeatReservationUpsertOne) SetReservedAt(v time.Time) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetReservedAt(v)
	})
}

// UpdateReservedAt sets the "reserved_at" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateReservedAt() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateReservedAt()
	})
}

// SetGroupID sets the "group_id" field.
func (u *SeatReservationUpsertOne) SetGroupID(v uuid.UUID) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateGroupID() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateGroupID()
	})
}

// SetStatus sets the "status" field.
func (u *SeatReservationUpsertOne) SetStatus(v seatreservation.Status) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateStatus() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateStatus()
	})
}

// SetStartTime sets the "start_time" field.
func (u *SeatReservationUpsertOne) SetStartTime(v time.Time) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateStartTime() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *SeatReservationUpsertOne) SetEndTime(v time.Time) *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *SeatReservationUpsertOne) UpdateEndTime() *SeatReservationUpsertOne {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *SeatReservationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatReservationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatReservationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SeatReservationUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SeatReservationUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SeatReservationCreateBulk is the builder for creating many SeatReservation entities in bulk.
type SeatReservationCreateBulk struct {
	config
	err      error
	builders []*SeatReservationCreate
	conflict []sql.ConflictOption
}

// Save creates the SeatReservation entities in the database.
func (srcb *SeatReservationCreateBulk) Save(ctx context.Context) ([]*SeatReservation, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SeatReservation, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SeatReservationCreateBulk) SaveX(ctx context.Context) []*SeatReservation {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SeatReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SeatReservationCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatReservation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatReservationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (srcb *SeatReservationCreateBulk) OnConflict(opts ...sql.ConflictOption) *SeatReservationUpsertBulk {
	srcb.conflict = opts
	return &SeatReservationUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *SeatReservationCreateBulk) OnConflictColumns(columns ...string) *SeatReservationUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &SeatReservationUpsertBulk{
		create: srcb,
	}
}

// SeatReservationUpsertBulk is the builder for "upsert"-ing
// a bulk of SeatReservation nodes.
type SeatReservationUpsertBulk struct {
	create *SeatReservationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatreservation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatReservationUpsertBulk) UpdateNewValues() *SeatReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(seatreservation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(seatreservation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatReservation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SeatReservationUpsertBulk) Ignore() *SeatReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatReservationUpsertBulk) DoNothing() *SeatReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatReservationCreateBulk.OnConflict
// documentation for more info.
func (u *SeatReservationUpsertBulk) Update(set func(*SeatReservationUpsert)) *SeatReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatReservationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SeatReservationUpsertBulk) SetUpdatedAt(v time.Time) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateUpdatedAt() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetReservedAt sets the "reserved_at" field.
func (u *SeatReservationUpsertBulk) SetReservedAt(v time.Time) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetReservedAt(v)
	})
}

// UpdateReservedAt sets the "reserved_at" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateReservedAt() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateReservedAt()
	})
}

// SetGroupID sets the "group_id" field.
func (u *SeatReservationUpsertBulk) SetGroupID(v uuid.UUID) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateGroupID() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateGroupID()
	})
}

// SetStatus sets the "status" field.
func (u *SeatReservationUpsertBulk) SetStatus(v seatreservation.Status) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateStatus() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateStatus()
	})
}

// SetStartTime sets the "start_time" field.
func (u *SeatReservationUpsertBulk) SetStartTime(v time.Time) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateStartTime() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *SeatReservationUpsertBulk) SetEndTime(v time.Time) *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *SeatReservationUpsertBulk) UpdateEndTime() *SeatReservationUpsertBulk {
	return u.Update(func(s *SeatReservationUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *SeatReservationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SeatReservationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatReservationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatReservationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

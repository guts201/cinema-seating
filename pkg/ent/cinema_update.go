// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cinema/pkg/ent/cinema"
	"cinema/pkg/ent/predicate"
	"cinema/pkg/ent/screening"
	"cinema/pkg/ent/seat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CinemaUpdate is the builder for updating Cinema entities.
type CinemaUpdate struct {
	config
	hooks     []Hook
	mutation  *CinemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CinemaUpdate builder.
func (cu *CinemaUpdate) Where(ps ...predicate.Cinema) *CinemaUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CinemaUpdate) SetUpdatedAt(t time.Time) *CinemaUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNumRow sets the "num_row" field.
func (cu *CinemaUpdate) SetNumRow(u uint32) *CinemaUpdate {
	cu.mutation.ResetNumRow()
	cu.mutation.SetNumRow(u)
	return cu
}

// SetNillableNumRow sets the "num_row" field if the given value is not nil.
func (cu *CinemaUpdate) SetNillableNumRow(u *uint32) *CinemaUpdate {
	if u != nil {
		cu.SetNumRow(*u)
	}
	return cu
}

// AddNumRow adds u to the "num_row" field.
func (cu *CinemaUpdate) AddNumRow(u int32) *CinemaUpdate {
	cu.mutation.AddNumRow(u)
	return cu
}

// SetNumColumn sets the "num_column" field.
func (cu *CinemaUpdate) SetNumColumn(u uint32) *CinemaUpdate {
	cu.mutation.ResetNumColumn()
	cu.mutation.SetNumColumn(u)
	return cu
}

// SetNillableNumColumn sets the "num_column" field if the given value is not nil.
func (cu *CinemaUpdate) SetNillableNumColumn(u *uint32) *CinemaUpdate {
	if u != nil {
		cu.SetNumColumn(*u)
	}
	return cu
}

// AddNumColumn adds u to the "num_column" field.
func (cu *CinemaUpdate) AddNumColumn(u int32) *CinemaUpdate {
	cu.mutation.AddNumColumn(u)
	return cu
}

// SetName sets the "name" field.
func (cu *CinemaUpdate) SetName(s string) *CinemaUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CinemaUpdate) SetNillableName(s *string) *CinemaUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetMinDistance sets the "min_distance" field.
func (cu *CinemaUpdate) SetMinDistance(u uint32) *CinemaUpdate {
	cu.mutation.ResetMinDistance()
	cu.mutation.SetMinDistance(u)
	return cu
}

// SetNillableMinDistance sets the "min_distance" field if the given value is not nil.
func (cu *CinemaUpdate) SetNillableMinDistance(u *uint32) *CinemaUpdate {
	if u != nil {
		cu.SetMinDistance(*u)
	}
	return cu
}

// AddMinDistance adds u to the "min_distance" field.
func (cu *CinemaUpdate) AddMinDistance(u int32) *CinemaUpdate {
	cu.mutation.AddMinDistance(u)
	return cu
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (cu *CinemaUpdate) AddSeatIDs(ids ...int64) *CinemaUpdate {
	cu.mutation.AddSeatIDs(ids...)
	return cu
}

// AddSeats adds the "seats" edges to the Seat entity.
func (cu *CinemaUpdate) AddSeats(s ...*Seat) *CinemaUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSeatIDs(ids...)
}

// AddScreeningIDs adds the "screenings" edge to the Screening entity by IDs.
func (cu *CinemaUpdate) AddScreeningIDs(ids ...int64) *CinemaUpdate {
	cu.mutation.AddScreeningIDs(ids...)
	return cu
}

// AddScreenings adds the "screenings" edges to the Screening entity.
func (cu *CinemaUpdate) AddScreenings(s ...*Screening) *CinemaUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddScreeningIDs(ids...)
}

// Mutation returns the CinemaMutation object of the builder.
func (cu *CinemaUpdate) Mutation() *CinemaMutation {
	return cu.mutation
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (cu *CinemaUpdate) ClearSeats() *CinemaUpdate {
	cu.mutation.ClearSeats()
	return cu
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (cu *CinemaUpdate) RemoveSeatIDs(ids ...int64) *CinemaUpdate {
	cu.mutation.RemoveSeatIDs(ids...)
	return cu
}

// RemoveSeats removes "seats" edges to Seat entities.
func (cu *CinemaUpdate) RemoveSeats(s ...*Seat) *CinemaUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSeatIDs(ids...)
}

// ClearScreenings clears all "screenings" edges to the Screening entity.
func (cu *CinemaUpdate) ClearScreenings() *CinemaUpdate {
	cu.mutation.ClearScreenings()
	return cu
}

// RemoveScreeningIDs removes the "screenings" edge to Screening entities by IDs.
func (cu *CinemaUpdate) RemoveScreeningIDs(ids ...int64) *CinemaUpdate {
	cu.mutation.RemoveScreeningIDs(ids...)
	return cu
}

// RemoveScreenings removes "screenings" edges to Screening entities.
func (cu *CinemaUpdate) RemoveScreenings(s ...*Screening) *CinemaUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveScreeningIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CinemaUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CinemaUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CinemaUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CinemaUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CinemaUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := cinema.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CinemaUpdate) check() error {
	if v, ok := cu.mutation.NumRow(); ok {
		if err := cinema.NumRowValidator(v); err != nil {
			return &ValidationError{Name: "num_row", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_row": %w`, err)}
		}
	}
	if v, ok := cu.mutation.NumColumn(); ok {
		if err := cinema.NumColumnValidator(v); err != nil {
			return &ValidationError{Name: "num_column", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_column": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := cinema.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cinema.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MinDistance(); ok {
		if err := cinema.MinDistanceValidator(v); err != nil {
			return &ValidationError{Name: "min_distance", err: fmt.Errorf(`ent: validator failed for field "Cinema.min_distance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CinemaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CinemaUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CinemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cinema.Table, cinema.Columns, sqlgraph.NewFieldSpec(cinema.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(cinema.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.NumRow(); ok {
		_spec.SetField(cinema.FieldNumRow, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedNumRow(); ok {
		_spec.AddField(cinema.FieldNumRow, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.NumColumn(); ok {
		_spec.SetField(cinema.FieldNumColumn, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedNumColumn(); ok {
		_spec.AddField(cinema.FieldNumColumn, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cinema.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.MinDistance(); ok {
		_spec.SetField(cinema.FieldMinDistance, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedMinDistance(); ok {
		_spec.AddField(cinema.FieldMinDistance, field.TypeUint32, value)
	}
	if cu.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !cu.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ScreeningsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedScreeningsIDs(); len(nodes) > 0 && !cu.mutation.ScreeningsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ScreeningsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cinema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CinemaUpdateOne is the builder for updating a single Cinema entity.
type CinemaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CinemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CinemaUpdateOne) SetUpdatedAt(t time.Time) *CinemaUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNumRow sets the "num_row" field.
func (cuo *CinemaUpdateOne) SetNumRow(u uint32) *CinemaUpdateOne {
	cuo.mutation.ResetNumRow()
	cuo.mutation.SetNumRow(u)
	return cuo
}

// SetNillableNumRow sets the "num_row" field if the given value is not nil.
func (cuo *CinemaUpdateOne) SetNillableNumRow(u *uint32) *CinemaUpdateOne {
	if u != nil {
		cuo.SetNumRow(*u)
	}
	return cuo
}

// AddNumRow adds u to the "num_row" field.
func (cuo *CinemaUpdateOne) AddNumRow(u int32) *CinemaUpdateOne {
	cuo.mutation.AddNumRow(u)
	return cuo
}

// SetNumColumn sets the "num_column" field.
func (cuo *CinemaUpdateOne) SetNumColumn(u uint32) *CinemaUpdateOne {
	cuo.mutation.ResetNumColumn()
	cuo.mutation.SetNumColumn(u)
	return cuo
}

// SetNillableNumColumn sets the "num_column" field if the given value is not nil.
func (cuo *CinemaUpdateOne) SetNillableNumColumn(u *uint32) *CinemaUpdateOne {
	if u != nil {
		cuo.SetNumColumn(*u)
	}
	return cuo
}

// AddNumColumn adds u to the "num_column" field.
func (cuo *CinemaUpdateOne) AddNumColumn(u int32) *CinemaUpdateOne {
	cuo.mutation.AddNumColumn(u)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CinemaUpdateOne) SetName(s string) *CinemaUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CinemaUpdateOne) SetNillableName(s *string) *CinemaUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetMinDistance sets the "min_distance" field.
func (cuo *CinemaUpdateOne) SetMinDistance(u uint32) *CinemaUpdateOne {
	cuo.mutation.ResetMinDistance()
	cuo.mutation.SetMinDistance(u)
	return cuo
}

// SetNillableMinDistance sets the "min_distance" field if the given value is not nil.
func (cuo *CinemaUpdateOne) SetNillableMinDistance(u *uint32) *CinemaUpdateOne {
	if u != nil {
		cuo.SetMinDistance(*u)
	}
	return cuo
}

// AddMinDistance adds u to the "min_distance" field.
func (cuo *CinemaUpdateOne) AddMinDistance(u int32) *CinemaUpdateOne {
	cuo.mutation.AddMinDistance(u)
	return cuo
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (cuo *CinemaUpdateOne) AddSeatIDs(ids ...int64) *CinemaUpdateOne {
	cuo.mutation.AddSeatIDs(ids...)
	return cuo
}

// AddSeats adds the "seats" edges to the Seat entity.
func (cuo *CinemaUpdateOne) AddSeats(s ...*Seat) *CinemaUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSeatIDs(ids...)
}

// AddScreeningIDs adds the "screenings" edge to the Screening entity by IDs.
func (cuo *CinemaUpdateOne) AddScreeningIDs(ids ...int64) *CinemaUpdateOne {
	cuo.mutation.AddScreeningIDs(ids...)
	return cuo
}

// AddScreenings adds the "screenings" edges to the Screening entity.
func (cuo *CinemaUpdateOne) AddScreenings(s ...*Screening) *CinemaUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddScreeningIDs(ids...)
}

// Mutation returns the CinemaMutation object of the builder.
func (cuo *CinemaUpdateOne) Mutation() *CinemaMutation {
	return cuo.mutation
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (cuo *CinemaUpdateOne) ClearSeats() *CinemaUpdateOne {
	cuo.mutation.ClearSeats()
	return cuo
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (cuo *CinemaUpdateOne) RemoveSeatIDs(ids ...int64) *CinemaUpdateOne {
	cuo.mutation.RemoveSeatIDs(ids...)
	return cuo
}

// RemoveSeats removes "seats" edges to Seat entities.
func (cuo *CinemaUpdateOne) RemoveSeats(s ...*Seat) *CinemaUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSeatIDs(ids...)
}

// ClearScreenings clears all "screenings" edges to the Screening entity.
func (cuo *CinemaUpdateOne) ClearScreenings() *CinemaUpdateOne {
	cuo.mutation.ClearScreenings()
	return cuo
}

// RemoveScreeningIDs removes the "screenings" edge to Screening entities by IDs.
func (cuo *CinemaUpdateOne) RemoveScreeningIDs(ids ...int64) *CinemaUpdateOne {
	cuo.mutation.RemoveScreeningIDs(ids...)
	return cuo
}

// RemoveScreenings removes "screenings" edges to Screening entities.
func (cuo *CinemaUpdateOne) RemoveScreenings(s ...*Screening) *CinemaUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveScreeningIDs(ids...)
}

// Where appends a list predicates to the CinemaUpdate builder.
func (cuo *CinemaUpdateOne) Where(ps ...predicate.Cinema) *CinemaUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CinemaUpdateOne) Select(field string, fields ...string) *CinemaUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cinema entity.
func (cuo *CinemaUpdateOne) Save(ctx context.Context) (*Cinema, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CinemaUpdateOne) SaveX(ctx context.Context) *Cinema {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CinemaUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CinemaUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CinemaUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := cinema.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CinemaUpdateOne) check() error {
	if v, ok := cuo.mutation.NumRow(); ok {
		if err := cinema.NumRowValidator(v); err != nil {
			return &ValidationError{Name: "num_row", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_row": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.NumColumn(); ok {
		if err := cinema.NumColumnValidator(v); err != nil {
			return &ValidationError{Name: "num_column", err: fmt.Errorf(`ent: validator failed for field "Cinema.num_column": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := cinema.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cinema.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MinDistance(); ok {
		if err := cinema.MinDistanceValidator(v); err != nil {
			return &ValidationError{Name: "min_distance", err: fmt.Errorf(`ent: validator failed for field "Cinema.min_distance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CinemaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CinemaUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CinemaUpdateOne) sqlSave(ctx context.Context) (_node *Cinema, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cinema.Table, cinema.Columns, sqlgraph.NewFieldSpec(cinema.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cinema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cinema.FieldID)
		for _, f := range fields {
			if !cinema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cinema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cinema.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.NumRow(); ok {
		_spec.SetField(cinema.FieldNumRow, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedNumRow(); ok {
		_spec.AddField(cinema.FieldNumRow, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.NumColumn(); ok {
		_spec.SetField(cinema.FieldNumColumn, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedNumColumn(); ok {
		_spec.AddField(cinema.FieldNumColumn, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cinema.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.MinDistance(); ok {
		_spec.SetField(cinema.FieldMinDistance, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedMinDistance(); ok {
		_spec.AddField(cinema.FieldMinDistance, field.TypeUint32, value)
	}
	if cuo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !cuo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.SeatsTable,
			Columns: []string{cinema.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ScreeningsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedScreeningsIDs(); len(nodes) > 0 && !cuo.mutation.ScreeningsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ScreeningsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cinema.ScreeningsTable,
			Columns: []string{cinema.ScreeningsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(screening.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Cinema{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cinema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

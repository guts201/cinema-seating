// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cinema-seating/api/cinema.proto

package cinema

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Cinema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cinema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cinema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CinemaMultiError, or nil if none found.
func (m *Cinema) ValidateAll() error {
	return m.validate(true)
}

func (m *Cinema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Rows

	// no validation rules for Columns

	// no validation rules for MinDistance

	if len(errors) > 0 {
		return CinemaMultiError(errors)
	}

	return nil
}

// CinemaMultiError is an error wrapping multiple validation errors returned by
// Cinema.ValidateAll() if the designated constraints aren't met.
type CinemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CinemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CinemaMultiError) AllErrors() []error { return m }

// CinemaValidationError is the validation error returned by Cinema.Validate if
// the designated constraints aren't met.
type CinemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CinemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CinemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CinemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CinemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CinemaValidationError) ErrorName() string { return "CinemaValidationError" }

// Error satisfies the builtin error interface
func (e CinemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCinema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CinemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CinemaValidationError{}

// Validate checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Movie) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MovieMultiError, or nil if none found.
func (m *Movie) ValidateAll() error {
	return m.validate(true)
}

func (m *Movie) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for DurationMinutes

	if len(errors) > 0 {
		return MovieMultiError(errors)
	}

	return nil
}

// MovieMultiError is an error wrapping multiple validation errors returned by
// Movie.ValidateAll() if the designated constraints aren't met.
type MovieMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieMultiError) AllErrors() []error { return m }

// MovieValidationError is the validation error returned by Movie.Validate if
// the designated constraints aren't met.
type MovieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieValidationError) ErrorName() string { return "MovieValidationError" }

// Error satisfies the builtin error interface
func (e MovieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieValidationError{}

// Validate checks the field values on Screening with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Screening) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Screening with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScreeningMultiError, or nil
// if none found.
func (m *Screening) ValidateAll() error {
	return m.validate(true)
}

func (m *Screening) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MovieId

	// no validation rules for StartTime

	// no validation rules for Rows

	// no validation rules for Columns

	// no validation rules for MinDistance

	if len(errors) > 0 {
		return ScreeningMultiError(errors)
	}

	return nil
}

// ScreeningMultiError is an error wrapping multiple validation errors returned
// by Screening.ValidateAll() if the designated constraints aren't met.
type ScreeningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreeningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreeningMultiError) AllErrors() []error { return m }

// ScreeningValidationError is the validation error returned by
// Screening.Validate if the designated constraints aren't met.
type ScreeningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreeningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreeningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreeningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreeningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreeningValidationError) ErrorName() string { return "ScreeningValidationError" }

// Error satisfies the builtin error interface
func (e ScreeningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreening.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreeningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreeningValidationError{}

// Validate checks the field values on Seat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SeatMultiError, or nil if none found.
func (m *Seat) ValidateAll() error {
	return m.validate(true)
}

func (m *Seat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Row

	// no validation rules for Column

	if len(errors) > 0 {
		return SeatMultiError(errors)
	}

	return nil
}

// SeatMultiError is an error wrapping multiple validation errors returned by
// Seat.ValidateAll() if the designated constraints aren't met.
type SeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatMultiError) AllErrors() []error { return m }

// SeatValidationError is the validation error returned by Seat.Validate if the
// designated constraints aren't met.
type SeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatValidationError) ErrorName() string { return "SeatValidationError" }

// Error satisfies the builtin error interface
func (e SeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatValidationError{}

// Validate checks the field values on SeatGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeatGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeatGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeatGroupMultiError, or nil
// if none found.
func (m *SeatGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *SeatGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSeats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SeatGroupValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SeatGroupValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SeatGroupValidationError{
					field:  fmt.Sprintf("Seats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SeatGroupMultiError(errors)
	}

	return nil
}

// SeatGroupMultiError is an error wrapping multiple validation errors returned
// by SeatGroup.ValidateAll() if the designated constraints aren't met.
type SeatGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatGroupMultiError) AllErrors() []error { return m }

// SeatGroupValidationError is the validation error returned by
// SeatGroup.Validate if the designated constraints aren't met.
type SeatGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatGroupValidationError) ErrorName() string { return "SeatGroupValidationError" }

// Error satisfies the builtin error interface
func (e SeatGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeatGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatGroupValidationError{}

// Validate checks the field values on ReserveSeatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveSeatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveSeatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveSeatsRequestMultiError, or nil if none found.
func (m *ReserveSeatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveSeatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreeningId

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReserveSeatsRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReserveSeatsRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReserveSeatsRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReserveSeatsRequestMultiError(errors)
	}

	return nil
}

// ReserveSeatsRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveSeatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveSeatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveSeatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveSeatsRequestMultiError) AllErrors() []error { return m }

// ReserveSeatsRequestValidationError is the validation error returned by
// ReserveSeatsRequest.Validate if the designated constraints aren't met.
type ReserveSeatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveSeatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveSeatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveSeatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveSeatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveSeatsRequestValidationError) ErrorName() string {
	return "ReserveSeatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveSeatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveSeatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveSeatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveSeatsRequestValidationError{}

// Validate checks the field values on ReserveSeatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveSeatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveSeatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveSeatsResponseMultiError, or nil if none found.
func (m *ReserveSeatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveSeatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ReserveSeatsResponseMultiError(errors)
	}

	return nil
}

// ReserveSeatsResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveSeatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveSeatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveSeatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveSeatsResponseMultiError) AllErrors() []error { return m }

// ReserveSeatsResponseValidationError is the validation error returned by
// ReserveSeatsResponse.Validate if the designated constraints aren't met.
type ReserveSeatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveSeatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveSeatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveSeatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveSeatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveSeatsResponseValidationError) ErrorName() string {
	return "ReserveSeatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveSeatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveSeatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveSeatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveSeatsResponseValidationError{}

// Validate checks the field values on CancelSeatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSeatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSeatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSeatsRequestMultiError, or nil if none found.
func (m *CancelSeatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSeatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreeningId

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelSeatsRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelSeatsRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelSeatsRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelSeatsRequestMultiError(errors)
	}

	return nil
}

// CancelSeatsRequestMultiError is an error wrapping multiple validation errors
// returned by CancelSeatsRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelSeatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSeatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSeatsRequestMultiError) AllErrors() []error { return m }

// CancelSeatsRequestValidationError is the validation error returned by
// CancelSeatsRequest.Validate if the designated constraints aren't met.
type CancelSeatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSeatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSeatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSeatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSeatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSeatsRequestValidationError) ErrorName() string {
	return "CancelSeatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSeatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSeatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSeatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSeatsRequestValidationError{}

// Validate checks the field values on CancelSeatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSeatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSeatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSeatsResponseMultiError, or nil if none found.
func (m *CancelSeatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSeatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelSeatsResponseMultiError(errors)
	}

	return nil
}

// CancelSeatsResponseMultiError is an error wrapping multiple validation
// errors returned by CancelSeatsResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelSeatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSeatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSeatsResponseMultiError) AllErrors() []error { return m }

// CancelSeatsResponseValidationError is the validation error returned by
// CancelSeatsResponse.Validate if the designated constraints aren't met.
type CancelSeatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSeatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSeatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSeatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSeatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSeatsResponseValidationError) ErrorName() string {
	return "CancelSeatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSeatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSeatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSeatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSeatsResponseValidationError{}

// Validate checks the field values on GetAvailableGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailableGroupsRequestMultiError, or nil if none found.
func (m *GetAvailableGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreeningId

	// no validation rules for GroupSize

	if len(errors) > 0 {
		return GetAvailableGroupsRequestMultiError(errors)
	}

	return nil
}

// GetAvailableGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAvailableGroupsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAvailableGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableGroupsRequestMultiError) AllErrors() []error { return m }

// GetAvailableGroupsRequestValidationError is the validation error returned by
// GetAvailableGroupsRequest.Validate if the designated constraints aren't met.
type GetAvailableGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableGroupsRequestValidationError) ErrorName() string {
	return "GetAvailableGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableGroupsRequestValidationError{}

// Validate checks the field values on GetAvailableGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailableGroupsResponseMultiError, or nil if none found.
func (m *GetAvailableGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvailableGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvailableGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvailableGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAvailableGroupsResponseMultiError(errors)
	}

	return nil
}

// GetAvailableGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAvailableGroupsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAvailableGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableGroupsResponseMultiError) AllErrors() []error { return m }

// GetAvailableGroupsResponseValidationError is the validation error returned
// by GetAvailableGroupsResponse.Validate if the designated constraints aren't met.
type GetAvailableGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableGroupsResponseValidationError) ErrorName() string {
	return "GetAvailableGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableGroupsResponseValidationError{}

// Validate checks the field values on CreateCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCinemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCinemaRequestMultiError, or nil if none found.
func (m *CreateCinemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCinemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Rows

	// no validation rules for Columns

	// no validation rules for MinDistance

	if len(errors) > 0 {
		return CreateCinemaRequestMultiError(errors)
	}

	return nil
}

// CreateCinemaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCinemaRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCinemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCinemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCinemaRequestMultiError) AllErrors() []error { return m }

// CreateCinemaRequestValidationError is the validation error returned by
// CreateCinemaRequest.Validate if the designated constraints aren't met.
type CreateCinemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCinemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCinemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCinemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCinemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCinemaRequestValidationError) ErrorName() string {
	return "CreateCinemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCinemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCinemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCinemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCinemaRequestValidationError{}

// Validate checks the field values on CreateCinemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCinemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCinemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCinemaResponseMultiError, or nil if none found.
func (m *CreateCinemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCinemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCinemaResponseMultiError(errors)
	}

	return nil
}

// CreateCinemaResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCinemaResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCinemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCinemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCinemaResponseMultiError) AllErrors() []error { return m }

// CreateCinemaResponseValidationError is the validation error returned by
// CreateCinemaResponse.Validate if the designated constraints aren't met.
type CreateCinemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCinemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCinemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCinemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCinemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCinemaResponseValidationError) ErrorName() string {
	return "CreateCinemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCinemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCinemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCinemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCinemaResponseValidationError{}

// Validate checks the field values on UpdateCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCinemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCinemaRequestMultiError, or nil if none found.
func (m *UpdateCinemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCinemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Rows

	// no validation rules for Columns

	// no validation rules for MinDistance

	if len(errors) > 0 {
		return UpdateCinemaRequestMultiError(errors)
	}

	return nil
}

// UpdateCinemaRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCinemaRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCinemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCinemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCinemaRequestMultiError) AllErrors() []error { return m }

// UpdateCinemaRequestValidationError is the validation error returned by
// UpdateCinemaRequest.Validate if the designated constraints aren't met.
type UpdateCinemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCinemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCinemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCinemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCinemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCinemaRequestValidationError) ErrorName() string {
	return "UpdateCinemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCinemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCinemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCinemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCinemaRequestValidationError{}

// Validate checks the field values on UpdateCinemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCinemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCinemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCinemaResponseMultiError, or nil if none found.
func (m *UpdateCinemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCinemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateCinemaResponseMultiError(errors)
	}

	return nil
}

// UpdateCinemaResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCinemaResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCinemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCinemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCinemaResponseMultiError) AllErrors() []error { return m }

// UpdateCinemaResponseValidationError is the validation error returned by
// UpdateCinemaResponse.Validate if the designated constraints aren't met.
type UpdateCinemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCinemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCinemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCinemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCinemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCinemaResponseValidationError) ErrorName() string {
	return "UpdateCinemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCinemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCinemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCinemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCinemaResponseValidationError{}

// Validate checks the field values on DeleteCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCinemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCinemaRequestMultiError, or nil if none found.
func (m *DeleteCinemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCinemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCinemaRequestMultiError(errors)
	}

	return nil
}

// DeleteCinemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCinemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCinemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCinemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCinemaRequestMultiError) AllErrors() []error { return m }

// DeleteCinemaRequestValidationError is the validation error returned by
// DeleteCinemaRequest.Validate if the designated constraints aren't met.
type DeleteCinemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCinemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCinemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCinemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCinemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCinemaRequestValidationError) ErrorName() string {
	return "DeleteCinemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCinemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCinemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCinemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCinemaRequestValidationError{}

// Validate checks the field values on GetCinemasRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCinemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCinemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCinemasRequestMultiError, or nil if none found.
func (m *GetCinemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCinemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetCinemasRequestMultiError(errors)
	}

	return nil
}

// GetCinemasRequestMultiError is an error wrapping multiple validation errors
// returned by GetCinemasRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCinemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCinemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCinemasRequestMultiError) AllErrors() []error { return m }

// GetCinemasRequestValidationError is the validation error returned by
// GetCinemasRequest.Validate if the designated constraints aren't met.
type GetCinemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCinemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCinemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCinemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCinemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCinemasRequestValidationError) ErrorName() string {
	return "GetCinemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCinemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCinemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCinemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCinemasRequestValidationError{}

// Validate checks the field values on GetCinemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCinemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCinemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCinemasResponseMultiError, or nil if none found.
func (m *GetCinemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCinemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCinemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCinemasResponseValidationError{
						field:  fmt.Sprintf("Cinemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCinemasResponseValidationError{
						field:  fmt.Sprintf("Cinemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCinemasResponseValidationError{
					field:  fmt.Sprintf("Cinemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCinemasResponseMultiError(errors)
	}

	return nil
}

// GetCinemasResponseMultiError is an error wrapping multiple validation errors
// returned by GetCinemasResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCinemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCinemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCinemasResponseMultiError) AllErrors() []error { return m }

// GetCinemasResponseValidationError is the validation error returned by
// GetCinemasResponse.Validate if the designated constraints aren't met.
type GetCinemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCinemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCinemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCinemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCinemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCinemasResponseValidationError) ErrorName() string {
	return "GetCinemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCinemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCinemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCinemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCinemasResponseValidationError{}

// Validate checks the field values on GetCinemaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCinemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCinemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCinemaRequestMultiError, or nil if none found.
func (m *GetCinemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCinemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCinemaRequestMultiError(errors)
	}

	return nil
}

// GetCinemaRequestMultiError is an error wrapping multiple validation errors
// returned by GetCinemaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCinemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCinemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCinemaRequestMultiError) AllErrors() []error { return m }

// GetCinemaRequestValidationError is the validation error returned by
// GetCinemaRequest.Validate if the designated constraints aren't met.
type GetCinemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCinemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCinemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCinemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCinemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCinemaRequestValidationError) ErrorName() string { return "GetCinemaRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCinemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCinemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCinemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCinemaRequestValidationError{}

// Validate checks the field values on GetCinemaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCinemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCinemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCinemaResponseMultiError, or nil if none found.
func (m *GetCinemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCinemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCinema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCinemaResponseValidationError{
					field:  "Cinema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCinemaResponseValidationError{
					field:  "Cinema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCinema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCinemaResponseValidationError{
				field:  "Cinema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCinemaResponseMultiError(errors)
	}

	return nil
}

// GetCinemaResponseMultiError is an error wrapping multiple validation errors
// returned by GetCinemaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCinemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCinemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCinemaResponseMultiError) AllErrors() []error { return m }

// GetCinemaResponseValidationError is the validation error returned by
// GetCinemaResponse.Validate if the designated constraints aren't met.
type GetCinemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCinemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCinemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCinemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCinemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCinemaResponseValidationError) ErrorName() string {
	return "GetCinemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCinemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCinemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCinemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCinemaResponseValidationError{}

// Validate checks the field values on CreateMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieRequestMultiError, or nil if none found.
func (m *CreateMovieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for DurationMinutes

	if len(errors) > 0 {
		return CreateMovieRequestMultiError(errors)
	}

	return nil
}

// CreateMovieRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMovieRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMovieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieRequestMultiError) AllErrors() []error { return m }

// CreateMovieRequestValidationError is the validation error returned by
// CreateMovieRequest.Validate if the designated constraints aren't met.
type CreateMovieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieRequestValidationError) ErrorName() string {
	return "CreateMovieRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieRequestValidationError{}

// Validate checks the field values on CreateMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieResponseMultiError, or nil if none found.
func (m *CreateMovieResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateMovieResponseMultiError(errors)
	}

	return nil
}

// CreateMovieResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMovieResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMovieResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieResponseMultiError) AllErrors() []error { return m }

// CreateMovieResponseValidationError is the validation error returned by
// CreateMovieResponse.Validate if the designated constraints aren't met.
type CreateMovieResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieResponseValidationError) ErrorName() string {
	return "CreateMovieResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieResponseValidationError{}
